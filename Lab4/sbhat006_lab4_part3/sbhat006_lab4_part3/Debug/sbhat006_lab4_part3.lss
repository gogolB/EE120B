
sbhat006_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000202  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010c  0080010c  000002a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d4  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fd  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	72 d0       	rcall	.+228    	; 0x1a8 <main>
  c4:	9c c0       	rjmp	.+312    	; 0x1fe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TICK_SM>:
unsigned char tmpA;

unsigned char tmpB;

void TICK_SM()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	// Transitions
	switch(SM_STATE)
  d0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SM_STATE>
  d4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SM_STATE+0x1>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 05       	cpc	r25, r1
  dc:	b1 f0       	breq	.+44     	; 0x10a <TICK_SM+0x42>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	18 f0       	brcs	.+6      	; 0xea <TICK_SM+0x22>
  e4:	02 97       	sbiw	r24, 0x02	; 2
  e6:	19 f1       	breq	.+70     	; 0x12e <TICK_SM+0x66>
  e8:	32 c0       	rjmp	.+100    	; 0x14e <TICK_SM+0x86>
	{
		case INIT:
			if(tmpA)
  ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
  ee:	88 23       	and	r24, r24
  f0:	39 f0       	breq	.+14     	; 0x100 <TICK_SM+0x38>
				SM_STATE = BUTTON_RE;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <SM_STATE+0x1>
  fa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SM_STATE>
			else
				SM_STATE = INIT;
			break;
  fe:	2c c0       	rjmp	.+88     	; 0x158 <TICK_SM+0x90>
	{
		case INIT:
			if(tmpA)
				SM_STATE = BUTTON_RE;
			else
				SM_STATE = INIT;
 100:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <SM_STATE+0x1>
 104:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <SM_STATE>
			break;
 108:	27 c0       	rjmp	.+78     	; 0x158 <TICK_SM+0x90>
			
		case BUTTON_RE:
			if(!tmpA)
 10a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
 10e:	88 23       	and	r24, r24
 110:	39 f4       	brne	.+14     	; 0x120 <TICK_SM+0x58>
				SM_STATE = BUTTON_FE;
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <SM_STATE+0x1>
 11a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SM_STATE>
			else
				SM_STATE = BUTTON_RE;
			break;
 11e:	1c c0       	rjmp	.+56     	; 0x158 <TICK_SM+0x90>
			
		case BUTTON_RE:
			if(!tmpA)
				SM_STATE = BUTTON_FE;
			else
				SM_STATE = BUTTON_RE;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <SM_STATE+0x1>
 128:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SM_STATE>
			break;
 12c:	15 c0       	rjmp	.+42     	; 0x158 <TICK_SM+0x90>
			
		case BUTTON_FE:
			if(tmpA)
 12e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
 132:	88 23       	and	r24, r24
 134:	39 f0       	breq	.+14     	; 0x144 <TICK_SM+0x7c>
				SM_STATE = BUTTON_RE;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <SM_STATE+0x1>
 13e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SM_STATE>
			else
				SM_STATE = INIT;
			break;
 142:	0a c0       	rjmp	.+20     	; 0x158 <TICK_SM+0x90>
			
		case BUTTON_FE:
			if(tmpA)
				SM_STATE = BUTTON_RE;
			else
				SM_STATE = INIT;
 144:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <SM_STATE+0x1>
 148:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <SM_STATE>
			break;
 14c:	05 c0       	rjmp	.+10     	; 0x158 <TICK_SM+0x90>
			
		default:
			SM_STATE = INIT;
 14e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <SM_STATE+0x1>
 152:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <SM_STATE>
			break;
 156:	00 00       	nop
		
	}
	
	// State Actions
	switch(SM_STATE)
 158:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SM_STATE>
 15c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SM_STATE+0x1>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	91 05       	cpc	r25, r1
 164:	19 f0       	breq	.+6      	; 0x16c <TICK_SM+0xa4>
 166:	02 97       	sbiw	r24, 0x02	; 2
 168:	61 f0       	breq	.+24     	; 0x182 <TICK_SM+0xba>
				nextPattern++;
			else
				nextPattern = 0;
				
		default:
			break;
 16a:	19 c0       	rjmp	.+50     	; 0x19e <TICK_SM+0xd6>
	
	// State Actions
	switch(SM_STATE)
	{
		case BUTTON_RE:
			tmpB = lightPatterns[nextPattern];
 16c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	80 50       	subi	r24, 0x00	; 0
 176:	9f 4f       	sbci	r25, 0xFF	; 255
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
		break;
 180:	0f c0       	rjmp	.+30     	; 0x1a0 <TICK_SM+0xd8>
		
		case BUTTON_FE:
			if(nextPattern < maxPattern)
 182:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 186:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <maxPattern>
 18a:	98 17       	cp	r25, r24
 18c:	30 f4       	brcc	.+12     	; 0x19a <TICK_SM+0xd2>
				nextPattern++;
 18e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
			else
				nextPattern = 0;
				
		default:
			break;
 198:	02 c0       	rjmp	.+4      	; 0x19e <TICK_SM+0xd6>
		
		case BUTTON_FE:
			if(nextPattern < maxPattern)
				nextPattern++;
			else
				nextPattern = 0;
 19a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
				
		default:
			break;
 19e:	00 00       	nop
	}
}
 1a0:	00 00       	nop
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <main>:


int main(void)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 1b0:	81 e2       	ldi	r24, 0x21	; 33
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	10 82       	st	Z, r1
 1b8:	82 e2       	ldi	r24, 0x22	; 34
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 1c2:	87 e2       	ldi	r24, 0x27	; 39
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	10 82       	st	Z, r1
	
	SM_STATE = INIT;
 1d4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <SM_STATE+0x1>
 1d8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <SM_STATE>
	tmpA = 0x00;
 1dc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <tmpA>
	
    /* Replace with your application code */
    while (1) 
    {
		//PORTB = 0xFF;
		tmpA = PINA & 0x01;
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	81 70       	andi	r24, 0x01	; 1
 1ea:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tmpA>
		TICK_SM();
		PORTC = tmpB;
 1ee:	6c df       	rcall	.-296    	; 0xc8 <TICK_SM>
 1f0:	88 e2       	ldi	r24, 0x28	; 40
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <tmpB>
 1f8:	fc 01       	movw	r30, r24
    }
 1fa:	20 83       	st	Z, r18
 1fc:	f1 cf       	rjmp	.-30     	; 0x1e0 <main+0x38>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
