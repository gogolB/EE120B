
sbhat006_lab3_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088b  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ce  00000000  00000000  00000b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  0000133d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	63 d0       	rcall	.+198    	; 0x170 <main>
  aa:	94 c0       	rjmp	.+296    	; 0x1d4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <TickFct_Latch>:

unsigned char PA;
unsigned char PB;

void TickFct_Latch()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	// State transition
	switch(LA_State)
  b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LA_State>
  ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <LA_State+0x1>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	01 f1       	breq	.+64     	; 0x104 <TickFct_Latch+0x56>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	91 05       	cpc	r25, r1
  c8:	90 f0       	brcs	.+36     	; 0xee <TickFct_Latch+0x40>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	91 05       	cpc	r25, r1
  ce:	49 f1       	breq	.+82     	; 0x122 <TickFct_Latch+0x74>
  d0:	03 97       	sbiw	r24, 0x03	; 3
  d2:	c9 f5       	brne	.+114    	; 0x146 <TickFct_Latch+0x98>
	{
		case LA_B0_TRANS:
			if((PA & 1) == 0x01){
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	99 27       	eor	r25, r25
  e0:	89 2b       	or	r24, r25
  e2:	51 f1       	breq	.+84     	; 0x138 <TickFct_Latch+0x8a>
				LA_State = LA_B1;
  e4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <LA_State+0x1>
  e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <LA_State>
			}
			break;
  ec:	25 c0       	rjmp	.+74     	; 0x138 <TickFct_Latch+0x8a>
		case LA_B1:
			if((PA | 0) == 0x00){
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	88 23       	and	r24, r24
  f4:	19 f5       	brne	.+70     	; 0x13c <TickFct_Latch+0x8e>
				LA_State = LA_B1_TRANS;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <LA_State+0x1>
  fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LA_State>
			}
			break;
 102:	1c c0       	rjmp	.+56     	; 0x13c <TickFct_Latch+0x8e>
		case LA_B1_TRANS:
			if((PA & 1) == 0x01){
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	88 2f       	mov	r24, r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	99 27       	eor	r25, r25
 110:	89 2b       	or	r24, r25
 112:	b1 f0       	breq	.+44     	; 0x140 <TickFct_Latch+0x92>
				LA_State = LA_B0;
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <LA_State+0x1>
 11c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LA_State>
			}
			break;
 120:	0f c0       	rjmp	.+30     	; 0x140 <TickFct_Latch+0x92>
		case LA_B0:
			if((PA | 0) == 0x00){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	88 23       	and	r24, r24
 128:	69 f4       	brne	.+26     	; 0x144 <TickFct_Latch+0x96>
				LA_State = LA_B0_TRANS;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <LA_State+0x1>
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LA_State>
			}
			break;
 136:	06 c0       	rjmp	.+12     	; 0x144 <TickFct_Latch+0x96>
	{
		case LA_B0_TRANS:
			if((PA & 1) == 0x01){
				LA_State = LA_B1;
			}
			break;
 138:	00 00       	nop
 13a:	05 c0       	rjmp	.+10     	; 0x146 <TickFct_Latch+0x98>
		case LA_B1:
			if((PA | 0) == 0x00){
				LA_State = LA_B1_TRANS;
			}
			break;
 13c:	00 00       	nop
 13e:	03 c0       	rjmp	.+6      	; 0x146 <TickFct_Latch+0x98>
		case LA_B1_TRANS:
			if((PA & 1) == 0x01){
				LA_State = LA_B0;
			}
			break;
 140:	00 00       	nop
 142:	01 c0       	rjmp	.+2      	; 0x146 <TickFct_Latch+0x98>
		case LA_B0:
			if((PA | 0) == 0x00){
				LA_State = LA_B0_TRANS;
			}
			break;
 144:	00 00       	nop
	}
	
	// State action
	switch(LA_State)
 146:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LA_State>
 14a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <LA_State+0x1>
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	39 f0       	breq	.+14     	; 0x160 <TickFct_Latch+0xb2>
 152:	02 97       	sbiw	r24, 0x02	; 2
 154:	09 f0       	breq	.+2      	; 0x158 <TickFct_Latch+0xaa>
			break;
		case LA_B1:
			PB = 0x02;
			break;
		default:
			break;
 156:	08 c0       	rjmp	.+16     	; 0x168 <TickFct_Latch+0xba>
	
	// State action
	switch(LA_State)
	{
		case LA_B0: 
			PB = 0x01;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PB>
			break;
 15e:	04 c0       	rjmp	.+8      	; 0x168 <TickFct_Latch+0xba>
		case LA_B1:
			PB = 0x02;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PB>
			break;
 166:	00 00       	nop
		default:
			break;
	}
}
 168:	00 00       	nop
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <main>:

int main(void)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0x00;
 178:	81 e2       	ldi	r24, 0x21	; 33
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	10 82       	st	Z, r1
 180:	82 e2       	ldi	r24, 0x22	; 34
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	10 82       	st	Z, r1
	DDRB = 0xFF; PORTB = 0x00;
 188:	84 e2       	ldi	r24, 0x24	; 36
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
 192:	85 e2       	ldi	r24, 0x25	; 37
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	10 82       	st	Z, r1
	
    // Set initial state.
	LA_State = LA_B0_TRANS;
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <LA_State+0x1>
 1a2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LA_State>
	PB = 0x01;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PB>
	PORTB = PB;
 1ac:	85 e2       	ldi	r24, 0x25	; 37
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <PB>
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
	
    while (1) 
    {
		PA = PINA & 0xFF;
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		TickFct_Latch();
		PORTB = PB;
 1c4:	74 df       	rcall	.-280    	; 0xae <TickFct_Latch>
 1c6:	85 e2       	ldi	r24, 0x25	; 37
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <PB>
 1ce:	fc 01       	movw	r30, r24
    }
 1d0:	20 83       	st	Z, r18
 1d2:	f2 cf       	rjmp	.-28     	; 0x1b8 <main+0x48>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
