
sbhat006_lab3_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ed  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e0  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037f  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	dd d0       	rcall	.+442    	; 0x27e <main>
  c4:	06 c1       	rjmp	.+524    	; 0x2d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SM_Tick>:
unsigned char A = 0x00;
unsigned char PA = 0x00;
unsigned char B = 0x00;

void SM_Tick()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	// Transition
	switch(DI_SM_STATE)
  d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <DI_SM_STATE>
  d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DI_SM_STATE+0x1>
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	91 05       	cpc	r25, r1
  dc:	09 f4       	brne	.+2      	; 0xe0 <SM_Tick+0x18>
  de:	64 c0       	rjmp	.+200    	; 0x1a8 <SM_Tick+0xe0>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	30 f4       	brcc	.+12     	; 0xf2 <SM_Tick+0x2a>
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	59 f0       	breq	.+22     	; 0x100 <SM_Tick+0x38>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	09 f4       	brne	.+2      	; 0xf0 <SM_Tick+0x28>
  ee:	4a c0       	rjmp	.+148    	; 0x184 <SM_Tick+0xbc>
  f0:	92 c0       	rjmp	.+292    	; 0x216 <SM_Tick+0x14e>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	91 05       	cpc	r25, r1
  f6:	09 f4       	brne	.+2      	; 0xfa <SM_Tick+0x32>
  f8:	3e c0       	rjmp	.+124    	; 0x176 <SM_Tick+0xae>
  fa:	04 97       	sbiw	r24, 0x04	; 4
  fc:	a9 f1       	breq	.+106    	; 0x168 <SM_Tick+0xa0>
  fe:	8b c0       	rjmp	.+278    	; 0x216 <SM_Tick+0x14e>
	{
		case DR_SM_WAIT_FOR_INPUT:
			PA = (A & 0x07);
 100:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <A>
 104:	87 70       	andi	r24, 0x07	; 7
 106:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PA>
			if((A & 0x80) == 0x80)
 10a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <A>
 10e:	88 23       	and	r24, r24
 110:	3c f4       	brge	.+14     	; 0x120 <SM_Tick+0x58>
			{
				DI_SM_STATE = DR_SM_LOCK;
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 11a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
			}
			else
			{
				DI_SM_STATE = DR_SM_WAIT_FOR_INPUT;
			}
		break;
 11e:	7b c0       	rjmp	.+246    	; 0x216 <SM_Tick+0x14e>
			PA = (A & 0x07);
			if((A & 0x80) == 0x80)
			{
				DI_SM_STATE = DR_SM_LOCK;
			}
			else if((PA & 0x01) == 0x01 || (PA & 0x02) == 0x02 || (PA & 0x04) == 0x04)
 120:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PA>
 124:	88 2f       	mov	r24, r24
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	81 70       	andi	r24, 0x01	; 1
 12a:	99 27       	eor	r25, r25
 12c:	89 2b       	or	r24, r25
 12e:	81 f4       	brne	.+32     	; 0x150 <SM_Tick+0x88>
 130:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PA>
 134:	88 2f       	mov	r24, r24
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	82 70       	andi	r24, 0x02	; 2
 13a:	99 27       	eor	r25, r25
 13c:	89 2b       	or	r24, r25
 13e:	41 f4       	brne	.+16     	; 0x150 <SM_Tick+0x88>
 140:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PA>
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	84 70       	andi	r24, 0x04	; 4
 14a:	99 27       	eor	r25, r25
 14c:	89 2b       	or	r24, r25
 14e:	39 f0       	breq	.+14     	; 0x15e <SM_Tick+0x96>
			{
				DI_SM_STATE = DR_SM_PROCESS_INPUT;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 158:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
			}
			else
			{
				DI_SM_STATE = DR_SM_WAIT_FOR_INPUT;
			}
		break;
 15c:	5c c0       	rjmp	.+184    	; 0x216 <SM_Tick+0x14e>
			{
				DI_SM_STATE = DR_SM_PROCESS_INPUT;
			}
			else
			{
				DI_SM_STATE = DR_SM_WAIT_FOR_INPUT;
 15e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <DI_SM_STATE+0x1>
 162:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <DI_SM_STATE>
			}
		break;
 166:	57 c0       	rjmp	.+174    	; 0x216 <SM_Tick+0x14e>
		
		case DR_SM_LOCK:
			DI_SM_STATE = DR_SM_WAIT_FOR_INPUT_FALL;
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 170:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
		break;
 174:	50 c0       	rjmp	.+160    	; 0x216 <SM_Tick+0x14e>
		
		case DR_SM_UNLOCK:
			DI_SM_STATE = DR_SM_WAIT_FOR_INPUT_FALL;
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 17e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
		break;
 182:	49 c0       	rjmp	.+146    	; 0x216 <SM_Tick+0x14e>
		
		case DR_SM_PROCESS_INPUT:
			if((A & 0x80) == 0x80)
 184:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <A>
 188:	88 23       	and	r24, r24
 18a:	3c f4       	brge	.+14     	; 0x19a <SM_Tick+0xd2>
			{
				DI_SM_STATE = DR_SM_LOCK;
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 194:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
				break;
 198:	3e c0       	rjmp	.+124    	; 0x216 <SM_Tick+0x14e>
			}
			DI_SM_STATE = DR_SM_WAIT_FOR_INPUT_FALL;
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 1a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
		break;
 1a6:	37 c0       	rjmp	.+110    	; 0x216 <SM_Tick+0x14e>
		
		case DR_SM_WAIT_FOR_INPUT_FALL:
			if(A == 0x00)
 1a8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <A>
 1ac:	88 23       	and	r24, r24
 1ae:	59 f5       	brne	.+86     	; 0x206 <SM_Tick+0x13e>
			{
				if(next == maxLength && B == 0x00)
 1b0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
 1b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <maxLength>
 1b8:	98 17       	cp	r25, r24
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <SM_Tick+0x10e>
 1bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <B>
 1c0:	88 23       	and	r24, r24
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <SM_Tick+0x10e>
				{			// Correct and Door is locked.
					DI_SM_STATE = DR_SM_UNLOCK;
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 1cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
					next = 0;
 1d0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 1d4:	1f c0       	rjmp	.+62     	; 0x214 <SM_Tick+0x14c>
				}
				else if(next == maxLength && B == 0x01)
 1d6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
 1da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <maxLength>
 1de:	98 17       	cp	r25, r24
 1e0:	69 f4       	brne	.+26     	; 0x1fc <SM_Tick+0x134>
 1e2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <B>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	49 f4       	brne	.+18     	; 0x1fc <SM_Tick+0x134>
				{		// Correct and Door is unlocked.
					DI_SM_STATE = DR_SM_LOCK;
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 1f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
					next = 0;
 1f6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <SM_Tick+0x14c>
				}
				else
					DI_SM_STATE = DR_SM_WAIT_FOR_INPUT;
 1fc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <DI_SM_STATE+0x1>
 200:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <DI_SM_STATE>
			}
			else
			{
				DI_SM_STATE = DR_SM_WAIT_FOR_INPUT_FALL;
			}
		break;
 204:	07 c0       	rjmp	.+14     	; 0x214 <SM_Tick+0x14c>
				else
					DI_SM_STATE = DR_SM_WAIT_FOR_INPUT;
			}
			else
			{
				DI_SM_STATE = DR_SM_WAIT_FOR_INPUT_FALL;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <DI_SM_STATE+0x1>
 20e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DI_SM_STATE>
			}
		break;
 212:	00 c0       	rjmp	.+0      	; 0x214 <SM_Tick+0x14c>
 214:	00 00       	nop
			
	}
	
	// State Action tree
	switch(DI_SM_STATE)
 216:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <DI_SM_STATE>
 21a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DI_SM_STATE+0x1>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	91 05       	cpc	r25, r1
 222:	49 f0       	breq	.+18     	; 0x236 <SM_Tick+0x16e>
 224:	84 30       	cpi	r24, 0x04	; 4
 226:	91 05       	cpc	r25, r1
 228:	19 f0       	breq	.+6      	; 0x230 <SM_Tick+0x168>
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	41 f0       	breq	.+16     	; 0x23e <SM_Tick+0x176>
				next = 0;
		break;
		
	}
	
}
 22e:	23 c0       	rjmp	.+70     	; 0x276 <SM_Tick+0x1ae>
	
	// State Action tree
	switch(DI_SM_STATE)
	{
		case DR_SM_LOCK:
			B = 0x00;
 230:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <B>
		break;
 234:	20 c0       	rjmp	.+64     	; 0x276 <SM_Tick+0x1ae>
		
		case DR_SM_UNLOCK:
			B = 0x01;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <B>
		break;
 23c:	1c c0       	rjmp	.+56     	; 0x276 <SM_Tick+0x1ae>
		
		case DR_SM_PROCESS_INPUT:
			if(Sequence[next] == (A & 0x07))
 23e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 50       	subi	r24, 0x00	; 0
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	fc 01       	movw	r30, r24
 24c:	80 81       	ld	r24, Z
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <A>
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	87 70       	andi	r24, 0x07	; 7
 25c:	99 27       	eor	r25, r25
 25e:	28 17       	cp	r18, r24
 260:	39 07       	cpc	r19, r25
 262:	31 f4       	brne	.+12     	; 0x270 <SM_Tick+0x1a8>
				next++;
 264:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			else
				next = 0;
		break;
 26e:	02 c0       	rjmp	.+4      	; 0x274 <SM_Tick+0x1ac>
		
		case DR_SM_PROCESS_INPUT:
			if(Sequence[next] == (A & 0x07))
				next++;
			else
				next = 0;
 270:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		break;
 274:	00 00       	nop
		
	}
	
}
 276:	00 00       	nop
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <main>:

int main(void)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0x00;
 286:	81 e2       	ldi	r24, 0x21	; 33
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc 01       	movw	r30, r24
 28c:	10 82       	st	Z, r1
 28e:	82 e2       	ldi	r24, 0x22	; 34
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	fc 01       	movw	r30, r24
 294:	10 82       	st	Z, r1
	DDRB = 0xFF; PORTB = 0x00;
 296:	84 e2       	ldi	r24, 0x24	; 36
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	10 82       	st	Z, r1
	
	// INIT
	DI_SM_STATE = DR_SM_WAIT_FOR_INPUT;
 2a8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <DI_SM_STATE+0x1>
 2ac:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <DI_SM_STATE>
	B = 0x00;
 2b0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <B>
    /* Replace with your application code */
    while (1) 
    {
		A = PINA & 0x87;
 2b4:	80 e2       	ldi	r24, 0x20	; 32
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	80 81       	ld	r24, Z
 2bc:	87 78       	andi	r24, 0x87	; 135
 2be:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <A>
		SM_Tick();
		PORTB = B;
 2c2:	02 df       	rcall	.-508    	; 0xc8 <SM_Tick>
 2c4:	85 e2       	ldi	r24, 0x25	; 37
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <B>
 2cc:	fc 01       	movw	r30, r24
    }
 2ce:	20 83       	st	Z, r18
 2d0:	f1 cf       	rjmp	.-30     	; 0x2b4 <main+0x36>

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
