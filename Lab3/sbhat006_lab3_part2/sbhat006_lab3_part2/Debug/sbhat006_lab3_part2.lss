
sbhat006_lab3_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000889  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ce  00000000  00000000  00000bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000345  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001be1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8e d0       	rcall	.+284    	; 0x1c6 <main>
  aa:	be c0       	rjmp	.+380    	; 0x228 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SM_Tick>:

unsigned char A = 0x00;
unsigned char C = 0x00;

void SM_Tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	// Transition Tree
	switch(SM_STATE)
  b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SM_STATE>
  ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SM_STATE+0x1>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <SM_Tick+0x18>
  c4:	43 c0       	rjmp	.+134    	; 0x14c <SM_Tick+0x9e>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	91 05       	cpc	r25, r1
  ca:	b8 f0       	brcs	.+46     	; 0xfa <SM_Tick+0x4c>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	91 05       	cpc	r25, r1
  d0:	09 f4       	brne	.+2      	; 0xd4 <SM_Tick+0x26>
  d2:	56 c0       	rjmp	.+172    	; 0x180 <SM_Tick+0xd2>
  d4:	03 97       	sbiw	r24, 0x03	; 3
  d6:	09 f0       	breq	.+2      	; 0xda <SM_Tick+0x2c>
				C = 0;
				SM_STATE = SM_WAIT_BOTH_FALL;
			}
		break;
	}
}
  d8:	72 c0       	rjmp	.+228    	; 0x1be <SM_Tick+0x110>
{
	// Transition Tree
	switch(SM_STATE)
	{
		case SM_WAIT_BOTH_FALL:
			if(A == 0x00)
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	88 23       	and	r24, r24
  e0:	29 f4       	brne	.+10     	; 0xec <SM_Tick+0x3e>
				SM_STATE = SM_WAIT_FOR_BUTTON;
  e2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SM_STATE+0x1>
  e6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SM_STATE>
			else
				SM_STATE = SM_WAIT_BOTH_FALL;
		break;
  ea:	69 c0       	rjmp	.+210    	; 0x1be <SM_Tick+0x110>
	{
		case SM_WAIT_BOTH_FALL:
			if(A == 0x00)
				SM_STATE = SM_WAIT_FOR_BUTTON;
			else
				SM_STATE = SM_WAIT_BOTH_FALL;
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <SM_STATE+0x1>
  f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SM_STATE>
		break;
  f8:	62 c0       	rjmp	.+196    	; 0x1be <SM_Tick+0x110>
		
		case SM_WAIT_FOR_BUTTON:
			if(A == 0x01)
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	81 f4       	brne	.+32     	; 0x122 <SM_Tick+0x74>
			{
				if(C < 9)
 102:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <C>
 106:	89 30       	cpi	r24, 0x09	; 9
 108:	28 f4       	brcc	.+10     	; 0x114 <SM_Tick+0x66>
					C++;
 10a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <C>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <C>
				SM_STATE = SM_WAIT_FOR_INC_FALL;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <SM_STATE+0x1>
 11c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SM_STATE>
			{
				if(C > 0)
					C--;
				SM_STATE = SM_WAIT_FOR_DEC_FALL;
			}
		break;
 120:	49 c0       	rjmp	.+146    	; 0x1b4 <SM_Tick+0x106>
			{
				if(C < 9)
					C++;
				SM_STATE = SM_WAIT_FOR_INC_FALL;
			}
			else if(A == 0x02)
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	09 f0       	breq	.+2      	; 0x12c <SM_Tick+0x7e>
 12a:	44 c0       	rjmp	.+136    	; 0x1b4 <SM_Tick+0x106>
			{
				if(C > 0)
 12c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <C>
 130:	88 23       	and	r24, r24
 132:	29 f0       	breq	.+10     	; 0x13e <SM_Tick+0x90>
					C--;
 134:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <C>
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <C>
				SM_STATE = SM_WAIT_FOR_DEC_FALL;
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <SM_STATE+0x1>
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SM_STATE>
			}
		break;
 14a:	34 c0       	rjmp	.+104    	; 0x1b4 <SM_Tick+0x106>
		
		case SM_WAIT_FOR_INC_FALL:
			if(A == 0x00 || A == 0x02)
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 150:	88 23       	and	r24, r24
 152:	21 f0       	breq	.+8      	; 0x15c <SM_Tick+0xae>
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	29 f4       	brne	.+10     	; 0x166 <SM_Tick+0xb8>
				SM_STATE = SM_WAIT_FOR_BUTTON;
 15c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SM_STATE+0x1>
 160:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SM_STATE>
			else if(A == 0x03)
			{
				C = 0;
				SM_STATE = SM_WAIT_BOTH_FALL;
			}
		break;
 164:	29 c0       	rjmp	.+82     	; 0x1b8 <SM_Tick+0x10a>
		break;
		
		case SM_WAIT_FOR_INC_FALL:
			if(A == 0x00 || A == 0x02)
				SM_STATE = SM_WAIT_FOR_BUTTON;
			else if(A == 0x03)
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	29 f5       	brne	.+74     	; 0x1b8 <SM_Tick+0x10a>
			{
				C = 0;
 16e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <C>
				SM_STATE = SM_WAIT_BOTH_FALL;
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <SM_STATE+0x1>
 17a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SM_STATE>
			}
		break;
 17e:	1c c0       	rjmp	.+56     	; 0x1b8 <SM_Tick+0x10a>
		
		case SM_WAIT_FOR_DEC_FALL:
			if(A == 0x00 || A == 0x01)
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 184:	88 23       	and	r24, r24
 186:	21 f0       	breq	.+8      	; 0x190 <SM_Tick+0xe2>
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	29 f4       	brne	.+10     	; 0x19a <SM_Tick+0xec>
				SM_STATE = SM_WAIT_FOR_BUTTON;
 190:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SM_STATE+0x1>
 194:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SM_STATE>
			else if(A == 0x03)
			{
				C = 0;
				SM_STATE = SM_WAIT_BOTH_FALL;
			}
		break;
 198:	11 c0       	rjmp	.+34     	; 0x1bc <SM_Tick+0x10e>
		break;
		
		case SM_WAIT_FOR_DEC_FALL:
			if(A == 0x00 || A == 0x01)
				SM_STATE = SM_WAIT_FOR_BUTTON;
			else if(A == 0x03)
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	69 f4       	brne	.+26     	; 0x1bc <SM_Tick+0x10e>
			{
				C = 0;
 1a2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <C>
				SM_STATE = SM_WAIT_BOTH_FALL;
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <SM_STATE+0x1>
 1ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SM_STATE>
			}
		break;
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <SM_Tick+0x10e>
			{
				if(C > 0)
					C--;
				SM_STATE = SM_WAIT_FOR_DEC_FALL;
			}
		break;
 1b4:	00 00       	nop
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <SM_Tick+0x110>
			else if(A == 0x03)
			{
				C = 0;
				SM_STATE = SM_WAIT_BOTH_FALL;
			}
		break;
 1b8:	00 00       	nop
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <SM_Tick+0x110>
			else if(A == 0x03)
			{
				C = 0;
				SM_STATE = SM_WAIT_BOTH_FALL;
			}
		break;
 1bc:	00 00       	nop
	}
}
 1be:	00 00       	nop
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <main>:

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0x00;
 1ce:	81 e2       	ldi	r24, 0x21	; 33
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	10 82       	st	Z, r1
 1d6:	82 e2       	ldi	r24, 0x22	; 34
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 1de:	87 e2       	ldi	r24, 0x27	; 39
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	10 82       	st	Z, r1
    
	// Init.
	SM_STATE = SM_WAIT_FOR_BUTTON;
 1f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SM_STATE+0x1>
 1f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SM_STATE>
	C = 0x07;
 1f8:	87 e0       	ldi	r24, 0x07	; 7
 1fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <C>
	PORTC = C;
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <C>
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
	
	/* Replace with your application code */
    while (1) 
    {
		A = PINA & 0x03;
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	80 81       	ld	r24, Z
 212:	83 70       	andi	r24, 0x03	; 3
 214:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		SM_Tick();
		PORTC = C;
 218:	4a df       	rcall	.-364    	; 0xae <SM_Tick>
 21a:	88 e2       	ldi	r24, 0x28	; 40
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <C>
 222:	fc 01       	movw	r30, r24
    }
 224:	20 83       	st	Z, r18
 226:	f1 cf       	rjmp	.-30     	; 0x20a <main+0x44>

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
