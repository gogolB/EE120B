
sbhat006_lab1_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000860  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078b  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032e  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	8d c0       	rjmp	.+282    	; 0x1b6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  ac:	81 e2       	ldi	r24, 0x21	; 33
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	10 82       	st	Z, r1
  b4:	82 e2       	ldi	r24, 0x22	; 34
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // Configure port C's 8 pins as outputs,
  be:	87 e2       	ldi	r24, 0x27	; 39
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
	// initialize to 0s
	unsigned char amtFuel = 0x00; // intermediate variable used for port updates
  d0:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char outputLights = 0x00;
  d2:	19 82       	std	Y+1, r1	; 0x01
	unsigned char keyInIgnition = 0x00;
  d4:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char seatedDriver = 0x00;
  d6:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char seatBeltFastened = 0x00;
  d8:	1d 82       	std	Y+5, r1	; 0x05
	while(1)
	{
		// 1) Read Inputs and assign to variables
		amtFuel = PINA & 0x0F; // Mask PINA to only get the bit you are interested in
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	80 81       	ld	r24, Z
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	8a 83       	std	Y+2, r24	; 0x02
		keyInIgnition = PINA & (1 << 4);
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	80 71       	andi	r24, 0x10	; 16
  f0:	8b 83       	std	Y+3, r24	; 0x03
		seatedDriver = PINA & (1 << 5);
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	80 81       	ld	r24, Z
  fa:	80 72       	andi	r24, 0x20	; 32
  fc:	8c 83       	std	Y+4, r24	; 0x04
		seatBeltFastened = PINA & (1 << 6);
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	80 81       	ld	r24, Z
 106:	80 74       	andi	r24, 0x40	; 64
 108:	8d 83       	std	Y+5, r24	; 0x05
		
		// Calc
		if(amtFuel == 1 || amtFuel ==2)
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	19 f0       	breq	.+6      	; 0x116 <main+0x78>
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	19 f4       	brne	.+6      	; 0x11c <main+0x7e>
			outputLights = 0x20;
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	35 c0       	rjmp	.+106    	; 0x186 <main+0xe8>
		else if(amtFuel == 3 || amtFuel == 4)
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	19 f0       	breq	.+6      	; 0x128 <main+0x8a>
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	19 f4       	brne	.+6      	; 0x12e <main+0x90>
			outputLights = 0x30;
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	2c c0       	rjmp	.+88     	; 0x186 <main+0xe8>
		else if(amtFuel == 5 || amtFuel == 6)
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	85 30       	cpi	r24, 0x05	; 5
 132:	19 f0       	breq	.+6      	; 0x13a <main+0x9c>
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	86 30       	cpi	r24, 0x06	; 6
 138:	19 f4       	brne	.+6      	; 0x140 <main+0xa2>
			outputLights = 0x38;
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	89 83       	std	Y+1, r24	; 0x01
 13e:	23 c0       	rjmp	.+70     	; 0x186 <main+0xe8>
		else if(amtFuel == 7 || amtFuel == 8 || amtFuel == 9)
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	87 30       	cpi	r24, 0x07	; 7
 144:	31 f0       	breq	.+12     	; 0x152 <main+0xb4>
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	19 f0       	breq	.+6      	; 0x152 <main+0xb4>
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	89 30       	cpi	r24, 0x09	; 9
 150:	19 f4       	brne	.+6      	; 0x158 <main+0xba>
			outputLights = 0x3C;
 152:	8c e3       	ldi	r24, 0x3C	; 60
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	17 c0       	rjmp	.+46     	; 0x186 <main+0xe8>
		else if(amtFuel == 10 || amtFuel == 11 || amtFuel == 12)
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	8a 30       	cpi	r24, 0x0A	; 10
 15c:	31 f0       	breq	.+12     	; 0x16a <main+0xcc>
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	8b 30       	cpi	r24, 0x0B	; 11
 162:	19 f0       	breq	.+6      	; 0x16a <main+0xcc>
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	8c 30       	cpi	r24, 0x0C	; 12
 168:	19 f4       	brne	.+6      	; 0x170 <main+0xd2>
			outputLights = 0x3E;
 16a:	8e e3       	ldi	r24, 0x3E	; 62
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	0b c0       	rjmp	.+22     	; 0x186 <main+0xe8>
		else if(amtFuel == 13 || amtFuel == 14 || amtFuel == 15)
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	8d 30       	cpi	r24, 0x0D	; 13
 174:	31 f0       	breq	.+12     	; 0x182 <main+0xe4>
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	8e 30       	cpi	r24, 0x0E	; 14
 17a:	19 f0       	breq	.+6      	; 0x182 <main+0xe4>
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	8f 30       	cpi	r24, 0x0F	; 15
 180:	11 f4       	brne	.+4      	; 0x186 <main+0xe8>
			outputLights = 0x3F;
 182:	8f e3       	ldi	r24, 0x3F	; 63
 184:	89 83       	std	Y+1, r24	; 0x01
		
		if(amtFuel <= 4)
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	85 30       	cpi	r24, 0x05	; 5
 18a:	18 f4       	brcc	.+6      	; 0x192 <main+0xf4>
			outputLights = outputLights |(1 << 6);
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	89 83       	std	Y+1, r24	; 0x01
		
		if(keyInIgnition != 0 && seatedDriver != 0 && !seatBeltFastened)
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	88 23       	and	r24, r24
 196:	49 f0       	breq	.+18     	; 0x1aa <main+0x10c>
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	88 23       	and	r24, r24
 19c:	31 f0       	breq	.+12     	; 0x1aa <main+0x10c>
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	88 23       	and	r24, r24
 1a2:	19 f4       	brne	.+6      	; 0x1aa <main+0x10c>
			outputLights = outputLights |(1 << 7);
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	89 83       	std	Y+1, r24	; 0x01
		
		// 3) write results to port
		PORTC = outputLights;
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	29 81       	ldd	r18, Y+1	; 0x01
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
	}
 1b4:	92 cf       	rjmp	.-220    	; 0xda <main+0x3c>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
