
adu003_lab6_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000426  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800118  00800118  000004d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d63  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  0000133f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066d  00000000  00000000  00001bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000548  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002b79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	95 d1       	rcall	.+810    	; 0x3ee <main>
  c4:	ae c1       	rjmp	.+860    	; 0x422 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 17c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 180:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 184:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 188:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_end>
 18c:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_end+0x1>
 190:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x2>
 194:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 1be:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 1c2:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 1c6:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 1ca:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 1ce:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 1d2:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 1d6:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 1f4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 1f8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 1fc:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
 200:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 20e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 212:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 216:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 228:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 22c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 230:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 234:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 238:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 23c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 240:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 244:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
	}
}
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <increment>:
const unsigned char period = 150;       
const unsigned char* winner = "Winner!";  
const unsigned char* loser = "Loser!"; 

void increment() {
	score = (score < 9) ? score + 1 : score;    
 25a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <score>
 25e:	89 30       	cpi	r24, 0x09	; 9
 260:	08 f4       	brcc	.+2      	; 0x264 <increment+0xa>
 262:	8f 5f       	subi	r24, 0xFF	; 255
 264:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <score>
	LCD_Cursor(1);                              
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	4d df       	rcall	.-358    	; 0x106 <LCD_Cursor>
	LCD_WriteData(score + '0');               
 26c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <score>
 270:	80 5d       	subi	r24, 0xD0	; 208
 272:	60 cf       	rjmp	.-320    	; 0x134 <LCD_WriteData>
 274:	08 95       	ret

00000276 <decrement>:
}

void decrement() {
	score = (score > 0) ? score - 1 : score;   
 276:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <score>
 27a:	81 11       	cpse	r24, r1
 27c:	81 50       	subi	r24, 0x01	; 1
 27e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <score>
	LCD_Cursor(1);                              
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	40 df       	rcall	.-384    	; 0x106 <LCD_Cursor>
	LCD_WriteData(score + '0');               
 286:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <score>
 28a:	80 5d       	subi	r24, 0xD0	; 208
 28c:	53 cf       	rjmp	.-346    	; 0x134 <LCD_WriteData>
 28e:	08 95       	ret

00000290 <Tick>:
}

void Tick() {
	
	button = ~PINA & 0x01;                
 290:	80 b1       	in	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	28 2f       	mov	r18, r24
 296:	21 70       	andi	r18, 0x01	; 1
 298:	80 fd       	sbrc	r24, 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <button>

	// State Transitions
	switch (state) {
 2a0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <state>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	59 f0       	breq	.+22     	; 0x2be <Tick+0x2e>
 2a8:	30 f0       	brcs	.+12     	; 0x2b6 <Tick+0x26>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	81 f0       	breq	.+32     	; 0x2ce <Tick+0x3e>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <Tick+0x24>
 2b2:	3e c0       	rjmp	.+124    	; 0x330 <Tick+0xa0>
 2b4:	59 c0       	rjmp	.+178    	; 0x368 <Tick+0xd8>
		case START:
		state = INIT; 
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <state>
		break;  
 2bc:	58 c0       	rjmp	.+176    	; 0x36e <Tick+0xde>

		case INIT:
		direction = 0;               
 2be:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <direction>
		wait = 0;                   
 2c2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <wait>
		state = PLAY; 
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <state>
		break;   
 2cc:	5e c0       	rjmp	.+188    	; 0x38a <Tick+0xfa>

		case PLAY:
		if (button) 
 2ce:	21 11       	cpse	r18, r1
 2d0:	23 c0       	rjmp	.+70     	; 0x318 <Tick+0x88>
		{
			state = PAUSE;          
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <state>
			wait = 1;           
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <wait>
			count = 0;               
 2de:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <count>
			if (tmpB & 0x02) 
 2e2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tmpB>
 2e6:	81 ff       	sbrs	r24, 1
			{
				increment();        
 2e8:	0c c0       	rjmp	.+24     	; 0x302 <Tick+0x72>
				
				if (score == 9) 
 2ea:	b7 df       	rcall	.-146    	; 0x25a <increment>
 2ec:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <score>
 2f0:	89 30       	cpi	r24, 0x09	; 9
				{
					LCD_DisplayString(1, winner);  
 2f2:	91 f4       	brne	.+36     	; 0x318 <Tick+0x88>
 2f4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <winner>
 2f8:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <winner+0x1>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
			else 
			{
				decrement();        
 2fe:	23 df       	rcall	.-442    	; 0x146 <LCD_DisplayString>
 300:	0b c0       	rjmp	.+22     	; 0x318 <Tick+0x88>
				if (score == 0) 
 302:	b9 df       	rcall	.-142    	; 0x276 <decrement>
 304:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <score>
 308:	81 11       	cpse	r24, r1
				{
					LCD_DisplayString(1, loser); 
 30a:	06 c0       	rjmp	.+12     	; 0x318 <Tick+0x88>
 30c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 310:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 314:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		count++;                     
 316:	17 df       	rcall	.-466    	; 0x146 <LCD_DisplayString>
 318:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <count>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <count>
		state = START;             
		break;
	}

	// State Actions
	switch (state) {
 322:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <state>
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	11 f1       	breq	.+68     	; 0x36e <Tick+0xde>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	71 f1       	breq	.+92     	; 0x38a <Tick+0xfa>
		}
		count++;                     
		break;
		case PAUSE:
		
		if (!button && wait)
 32e:	52 c0       	rjmp	.+164    	; 0x3d4 <Tick+0x144>
 330:	22 23       	and	r18, r18
 332:	41 f0       	breq	.+16     	; 0x344 <Tick+0xb4>
 334:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <wait>
 338:	88 23       	and	r24, r24
 33a:	09 f4       	brne	.+2      	; 0x33e <Tick+0xae>
		{
			wait = 0;  
 33c:	51 c0       	rjmp	.+162    	; 0x3e0 <Tick+0x150>
 33e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <wait>
		}
		else if (button && !wait) 
 342:	48 c0       	rjmp	.+144    	; 0x3d4 <Tick+0x144>
 344:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <wait>
 348:	81 11       	cpse	r24, r1
		{
			if (score == 9 || score == 0) 
 34a:	44 c0       	rjmp	.+136    	; 0x3d4 <Tick+0x144>
 34c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <score>
 350:	89 30       	cpi	r24, 0x09	; 9
 352:	11 f0       	breq	.+4      	; 0x358 <Tick+0xc8>
 354:	81 11       	cpse	r24, r1
			{
				state = INIT;
 356:	04 c0       	rjmp	.+8      	; 0x360 <Tick+0xd0>
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <state>
			}
			else 
			{
				state = PLAY;          
 35e:	07 c0       	rjmp	.+14     	; 0x36e <Tick+0xde>
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <state>
			}
		}
		break;

		default:
		state = START;             
 366:	11 c0       	rjmp	.+34     	; 0x38a <Tick+0xfa>
		break;
 368:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <state>
	}

	// State Actions
	switch (state) {
		case INIT:
		LCD_ClearScreen();                      
 36c:	33 c0       	rjmp	.+102    	; 0x3d4 <Tick+0x144>
		tmpB = (tmpB & 0x00) | 0x01;          
 36e:	c8 de       	rcall	.-624    	; 0x100 <LCD_ClearScreen>
 370:	81 e0       	ldi	r24, 0x01	; 1
		score = 5;                            
 372:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <tmpB>
		LCD_Cursor(1);                          
 376:	85 e0       	ldi	r24, 0x05	; 5
 378:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <score>
		LCD_WriteData(score + '0'); 
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	c3 de       	rcall	.-634    	; 0x106 <LCD_Cursor>
 380:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <score>
		break;    
 384:	80 5d       	subi	r24, 0xD0	; 208

		case PLAY:
		
		if (count % 2) 
 386:	d6 de       	rcall	.-596    	; 0x134 <LCD_WriteData>
 388:	25 c0       	rjmp	.+74     	; 0x3d4 <Tick+0x144>
 38a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <count>
		{
			tmpB = (!direction) ? (tmpB << 1) : (tmpB >> 1);  
 38e:	80 ff       	sbrs	r24, 0
 390:	0d c0       	rjmp	.+26     	; 0x3ac <Tick+0x11c>
 392:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <direction>
 396:	81 11       	cpse	r24, r1
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <Tick+0x112>
 39a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tmpB>
 39e:	88 0f       	add	r24, r24
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <Tick+0x118>
 3a2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tmpB>
 3a6:	86 95       	lsr	r24
		}

		if (tmpB <= 0x01 && direction) 
 3a8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <tmpB>
 3ac:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tmpB>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	38 f4       	brcc	.+14     	; 0x3c2 <Tick+0x132>
 3b4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <direction>
		{
			direction = 0;   
 3b8:	99 23       	and	r25, r25
 3ba:	b1 f0       	breq	.+44     	; 0x3e8 <Tick+0x158>
 3bc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <direction>
		}
		else if (tmpB >= 0x04 && !direction) 
 3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <Tick+0x144>
 3c2:	84 30       	cpi	r24, 0x04	; 4
 3c4:	38 f0       	brcs	.+14     	; 0x3d4 <Tick+0x144>
 3c6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <direction>
		{
			direction = 1;    
 3ca:	81 11       	cpse	r24, r1

		default:
		break;
	}

	PORTB = tmpB;               
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <Tick+0x144>
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <direction>
	LCD_Cursor(0);                            
 3d4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tmpB>
}
 3d8:	85 b9       	out	0x05, r24	; 5
		
		if (!button && wait)
		{
			wait = 0;  
		}
		else if (button && !wait) 
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	94 ce       	rjmp	.-728    	; 0x106 <LCD_Cursor>
 3de:	08 95       	ret
 3e0:	22 23       	and	r18, r18

		if (tmpB <= 0x01 && direction) 
		{
			direction = 0;   
		}
		else if (tmpB >= 0x04 && !direction) 
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <Tick+0x156>
 3e4:	b3 cf       	rjmp	.-154    	; 0x34c <Tick+0xbc>
 3e6:	f6 cf       	rjmp	.-20     	; 0x3d4 <Tick+0x144>
 3e8:	84 30       	cpi	r24, 0x04	; 4
 3ea:	88 f7       	brcc	.-30     	; 0x3ce <Tick+0x13e>
 3ec:	f3 cf       	rjmp	.-26     	; 0x3d4 <Tick+0x144>

000003ee <main>:
	LCD_Cursor(0);                            
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 3ee:	11 b8       	out	0x01, r1	; 1
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 3f4:	84 b9       	out	0x04, r24	; 4
 3f6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; 
 3f8:	87 b9       	out	0x07, r24	; 7
 3fa:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; 
 3fc:	8a b9       	out	0x0a, r24	; 10

	LCD_init();
 3fe:	1b b8       	out	0x0b, r1	; 11

	TimerSet(period);            
 400:	8a de       	rcall	.-748    	; 0x116 <LCD_init>
 402:	66 e9       	ldi	r22, 0x96	; 150
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
	TimerOn();                
 408:	90 e0       	ldi	r25, 0x00	; 0
	state = START;             
 40a:	b6 de       	rcall	.-660    	; 0x178 <TimerSet>
 40c:	c6 de       	rcall	.-628    	; 0x19a <TimerOn>

	while(1)
	{
		Tick();                
 40e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <state>
		while (!TimerFlag);     
 412:	3e df       	rcall	.-388    	; 0x290 <Tick>
 414:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TimerFlag>
 418:	88 23       	and	r24, r24
		TimerFlag = 0;         
 41a:	e1 f3       	breq	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <TimerFlag>
 420:	f8 cf       	rjmp	.-16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
