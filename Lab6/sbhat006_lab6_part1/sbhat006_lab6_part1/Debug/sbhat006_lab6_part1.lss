
sbhat006_lab6_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000606  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800110  00800110  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae7  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000870  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fd  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054e  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  0000285e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	78 c1       	rjmp	.+752    	; 0x326 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	52 d2       	rcall	.+1188   	; 0x568 <main>
  c4:	9e c2       	rjmp	.+1340   	; 0x602 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	1a d0       	rcall	.+52     	; 0x108 <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ac d0       	rcall	.+344    	; 0x242 <delay_ms>
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0d d0       	rcall	.+26     	; 0x108 <LCD_WriteCommand>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0b d0       	rcall	.+22     	; 0x108 <LCD_WriteCommand>
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	09 d0       	rcall	.+18     	; 0x108 <LCD_WriteCommand>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	07 d0       	rcall	.+14     	; 0x108 <LCD_WriteCommand>
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a1 d0       	rcall	.+322    	; 0x242 <delay_ms>
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_WriteCommand>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e2       	ldi	r18, 0x2B	; 43
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 68       	ori	r18, 0x80	; 128
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2b e2       	ldi	r18, 0x2B	; 43
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 77       	andi	r18, 0x7F	; 127
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	73 d0       	rcall	.+230    	; 0x242 <delay_ms>
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_WriteData>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	8b e2       	ldi	r24, 0x2B	; 43
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2b e2       	ldi	r18, 0x2B	; 43
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	20 64       	ori	r18, 0x40	; 64
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	20 68       	ori	r18, 0x80	; 128
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	00 00       	nop
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e2       	ldi	r18, 0x2B	; 43
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	44 d0       	rcall	.+136    	; 0x242 <delay_ms>
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_DisplayString>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <LCD_DisplayString+0x6>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <LCD_DisplayString+0x8>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8a 83       	std	Y+2, r24	; 0x02
 1d2:	7c 83       	std	Y+4, r23	; 0x04
 1d4:	6b 83       	std	Y+3, r22	; 0x03
 1d6:	78 df       	rcall	.-272    	; 0xc8 <LCD_ClearScreen>
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <LCD_DisplayString+0x38>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	98 0f       	add	r25, r24
 1e4:	99 83       	std	Y+1, r25	; 0x01
 1e6:	18 d0       	rcall	.+48     	; 0x218 <LCD_Cursor>
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	9c 01       	movw	r18, r24
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	3c 83       	std	Y+4, r19	; 0x04
 1f4:	2b 83       	std	Y+3, r18	; 0x03
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	b5 df       	rcall	.-150    	; 0x166 <LCD_WriteData>
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	59 f7       	brne	.-42     	; 0x1de <LCD_DisplayString+0x1a>
 208:	00 00       	nop
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_Cursor>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	81 31       	cpi	r24, 0x11	; 17
 228:	20 f4       	brcc	.+8      	; 0x232 <LCD_Cursor+0x1a>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	81 58       	subi	r24, 0x81	; 129
 22e:	6c df       	rcall	.-296    	; 0x108 <LCD_WriteCommand>
 230:	03 c0       	rjmp	.+6      	; 0x238 <LCD_Cursor+0x20>
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	81 55       	subi	r24, 0x51	; 81
 236:	68 df       	rcall	.-304    	; 0x108 <LCD_WriteCommand>
 238:	00 00       	nop
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <delay_ms>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <delay_ms+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <delay_ms+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <delay_ms+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	9e 83       	std	Y+6, r25	; 0x06
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	1a 82       	std	Y+2, r1	; 0x02
 256:	19 82       	std	Y+1, r1	; 0x01
 258:	13 c0       	rjmp	.+38     	; 0x280 <delay_ms+0x3e>
 25a:	1c 82       	std	Y+4, r1	; 0x04
 25c:	1b 82       	std	Y+3, r1	; 0x03
 25e:	06 c0       	rjmp	.+12     	; 0x26c <delay_ms+0x2a>
 260:	00 00       	nop
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	9c 81       	ldd	r25, Y+4	; 0x04
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	9c 83       	std	Y+4, r25	; 0x04
 26a:	8b 83       	std	Y+3, r24	; 0x03
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	87 30       	cpi	r24, 0x07	; 7
 272:	93 40       	sbci	r25, 0x03	; 3
 274:	ac f3       	brlt	.-22     	; 0x260 <delay_ms+0x1e>
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	3a 81       	ldd	r19, Y+2	; 0x02
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	28 17       	cp	r18, r24
 28a:	39 07       	cpc	r19, r25
 28c:	34 f3       	brlt	.-52     	; 0x25a <delay_ms+0x18>
 28e:	00 00       	nop
 290:	26 96       	adiw	r28, 0x06	; 6
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <TimerOn>:
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	81 e8       	ldi	r24, 0x81	; 129
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	2b e0       	ldi	r18, 0x0B	; 11
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
 2b4:	88 e8       	ldi	r24, 0x88	; 136
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	2d e7       	ldi	r18, 0x7D	; 125
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	31 83       	std	Z+1, r19	; 0x01
 2c0:	20 83       	st	Z, r18
 2c2:	8f e6       	ldi	r24, 0x6F	; 111
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	22 e0       	ldi	r18, 0x02	; 2
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
 2cc:	84 e8       	ldi	r24, 0x84	; 132
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	11 82       	std	Z+1, r1	; 0x01
 2d4:	10 82       	st	Z, r1
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2de:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2e2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2e6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr>
 2ea:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x1>
 2ee:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <_avr_timer_cntcurr+0x2>
 2f2:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <_avr_timer_cntcurr+0x3>
 2f6:	8f e5       	ldi	r24, 0x5F	; 95
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	2f e5       	ldi	r18, 0x5F	; 95
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	20 81       	ld	r18, Z
 302:	20 68       	ori	r18, 0x80	; 128
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
 308:	00 00       	nop
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <TimerISR>:

void TimerISR() {
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TimerFlag>
}
 31e:	00 00       	nop
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 336:	0f 92       	push	r0
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 358:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_cntcurr>
 35c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x1>
 360:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_cntcurr+0x2>
 364:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_cntcurr+0x3>
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	a1 09       	sbc	r26, r1
 36c:	b1 09       	sbc	r27, r1
 36e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr>
 372:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x1>
 376:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <_avr_timer_cntcurr+0x2>
 37a:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 37e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_cntcurr>
 382:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x1>
 386:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_cntcurr+0x2>
 38a:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_cntcurr+0x3>
 38e:	89 2b       	or	r24, r25
 390:	8a 2b       	or	r24, r26
 392:	8b 2b       	or	r24, r27
		TimerISR(); // Call the ISR that the user uses
 394:	89 f4       	brne	.+34     	; 0x3b8 <__vector_13+0x92>
		_avr_timer_cntcurr = _avr_timer_M;
 396:	bc df       	rcall	.-136    	; 0x310 <TimerISR>
 398:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 39c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3a8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr>
 3ac:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x1>
 3b0:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <_avr_timer_cntcurr+0x2>
 3b4:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <_avr_timer_cntcurr+0x3>
	}
}
 3b8:	00 00       	nop
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3dc:	0f 90       	pop	r0
 3de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	00 d0       	rcall	.+0      	; 0x3ee <TimerSet+0x6>
 3ee:	00 d0       	rcall	.+0      	; 0x3f0 <TimerSet+0x8>
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	69 83       	std	Y+1, r22	; 0x01
 3f6:	7a 83       	std	Y+2, r23	; 0x02
 3f8:	8b 83       	std	Y+3, r24	; 0x03
 3fa:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	ab 81       	ldd	r26, Y+3	; 0x03
 402:	bc 81       	ldd	r27, Y+4	; 0x04
 404:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 408:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 40c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 410:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 414:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 418:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 41c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 420:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 424:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr>
 428:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x1>
 42c:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <_avr_timer_cntcurr+0x2>
 430:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <_avr_timer_cntcurr+0x3>
}
 434:	00 00       	nop
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <SM_Tick>:


void SM_Tick()
{
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
	// Transition Tree
	switch(SM_STATE)
 44c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <SM_STATE>
 450:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <SM_STATE+0x1>
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	91 05       	cpc	r25, r1
 458:	09 f4       	brne	.+2      	; 0x45c <SM_Tick+0x18>
 45a:	49 c0       	rjmp	.+146    	; 0x4ee <SM_Tick+0xaa>
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	91 05       	cpc	r25, r1
 460:	b8 f0       	brcs	.+46     	; 0x490 <SM_Tick+0x4c>
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	91 05       	cpc	r25, r1
 466:	09 f4       	brne	.+2      	; 0x46a <SM_Tick+0x26>
 468:	5c c0       	rjmp	.+184    	; 0x522 <SM_Tick+0xde>
 46a:	03 97       	sbiw	r24, 0x03	; 3
 46c:	09 f0       	breq	.+2      	; 0x470 <SM_Tick+0x2c>
			C = 0;
			SM_STATE = SM_WAIT_BOTH_FALL;
		}
		break;
	}
}
 46e:	78 c0       	rjmp	.+240    	; 0x560 <SM_Tick+0x11c>
{
	// Transition Tree
	switch(SM_STATE)
	{
		case SM_WAIT_BOTH_FALL:
		if(A == 0x00)
 470:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 474:	88 23       	and	r24, r24
 476:	29 f4       	brne	.+10     	; 0x482 <SM_Tick+0x3e>
		SM_STATE = SM_WAIT_FOR_BUTTON;
 478:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SM_STATE+0x1>
 47c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SM_STATE>
		else
		SM_STATE = SM_WAIT_BOTH_FALL;
		break;
 480:	6f c0       	rjmp	.+222    	; 0x560 <SM_Tick+0x11c>
	{
		case SM_WAIT_BOTH_FALL:
		if(A == 0x00)
		SM_STATE = SM_WAIT_FOR_BUTTON;
		else
		SM_STATE = SM_WAIT_BOTH_FALL;
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <SM_STATE+0x1>
 48a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <SM_STATE>
		break;
 48e:	68 c0       	rjmp	.+208    	; 0x560 <SM_Tick+0x11c>
		
		case SM_WAIT_FOR_BUTTON:
		if(A == 0x03)
 490:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	31 f4       	brne	.+12     	; 0x4a4 <SM_Tick+0x60>
		{
			C = 0;
 498:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <C>
			SM_STATE = SM_WAIT_FOR_BUTTON;
 49c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SM_STATE+0x1>
 4a0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SM_STATE>
		}
		if(A == 0x01)
 4a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	71 f4       	brne	.+28     	; 0x4c8 <SM_Tick+0x84>
		{
			if(C < 9)
 4ac:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <C>
 4b0:	89 30       	cpi	r24, 0x09	; 9
 4b2:	28 f4       	brcc	.+10     	; 0x4be <SM_Tick+0x7a>
			C++;
 4b4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <C>
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <C>
			SM_STATE = SM_WAIT_FOR_BUTTON;
 4be:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SM_STATE+0x1>
 4c2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SM_STATE>
		{
			if(C > 0)
			C--;
			SM_STATE = SM_WAIT_FOR_BUTTON;
		}
		break;
 4c6:	47 c0       	rjmp	.+142    	; 0x556 <SM_Tick+0x112>
		{
			if(C < 9)
			C++;
			SM_STATE = SM_WAIT_FOR_BUTTON;
		}
		else if(A == 0x02)
 4c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <SM_Tick+0x8e>
 4d0:	42 c0       	rjmp	.+132    	; 0x556 <SM_Tick+0x112>
		{
			if(C > 0)
 4d2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <C>
 4d6:	88 23       	and	r24, r24
 4d8:	29 f0       	breq	.+10     	; 0x4e4 <SM_Tick+0xa0>
			C--;
 4da:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <C>
 4de:	81 50       	subi	r24, 0x01	; 1
 4e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <C>
			SM_STATE = SM_WAIT_FOR_BUTTON;
 4e4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SM_STATE+0x1>
 4e8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SM_STATE>
		}
		break;
 4ec:	34 c0       	rjmp	.+104    	; 0x556 <SM_Tick+0x112>
		
		case SM_WAIT_FOR_INC_FALL:
		if(A == 0x00 || A == 0x02)
 4ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 4f2:	88 23       	and	r24, r24
 4f4:	21 f0       	breq	.+8      	; 0x4fe <SM_Tick+0xba>
 4f6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	29 f4       	brne	.+10     	; 0x508 <SM_Tick+0xc4>
		SM_STATE = SM_WAIT_FOR_BUTTON;
 4fe:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SM_STATE+0x1>
 502:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SM_STATE>
		else if(A == 0x03)
		{
			C = 0;
			SM_STATE = SM_WAIT_BOTH_FALL;
		}
		break;
 506:	29 c0       	rjmp	.+82     	; 0x55a <SM_Tick+0x116>
		break;
		
		case SM_WAIT_FOR_INC_FALL:
		if(A == 0x00 || A == 0x02)
		SM_STATE = SM_WAIT_FOR_BUTTON;
		else if(A == 0x03)
 508:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	29 f5       	brne	.+74     	; 0x55a <SM_Tick+0x116>
		{
			C = 0;
 510:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <C>
			SM_STATE = SM_WAIT_BOTH_FALL;
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <SM_STATE+0x1>
 51c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <SM_STATE>
		}
		break;
 520:	1c c0       	rjmp	.+56     	; 0x55a <SM_Tick+0x116>
		
		case SM_WAIT_FOR_DEC_FALL:
		if(A == 0x00 || A == 0x01)
 522:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 526:	88 23       	and	r24, r24
 528:	21 f0       	breq	.+8      	; 0x532 <SM_Tick+0xee>
 52a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	29 f4       	brne	.+10     	; 0x53c <SM_Tick+0xf8>
		SM_STATE = SM_WAIT_FOR_BUTTON;
 532:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SM_STATE+0x1>
 536:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SM_STATE>
		else if(A == 0x03)
		{
			C = 0;
			SM_STATE = SM_WAIT_BOTH_FALL;
		}
		break;
 53a:	11 c0       	rjmp	.+34     	; 0x55e <SM_Tick+0x11a>
		break;
		
		case SM_WAIT_FOR_DEC_FALL:
		if(A == 0x00 || A == 0x01)
		SM_STATE = SM_WAIT_FOR_BUTTON;
		else if(A == 0x03)
 53c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 540:	83 30       	cpi	r24, 0x03	; 3
 542:	69 f4       	brne	.+26     	; 0x55e <SM_Tick+0x11a>
		{
			C = 0;
 544:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <C>
			SM_STATE = SM_WAIT_BOTH_FALL;
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <SM_STATE+0x1>
 550:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <SM_STATE>
		}
		break;
 554:	04 c0       	rjmp	.+8      	; 0x55e <SM_Tick+0x11a>
		{
			if(C > 0)
			C--;
			SM_STATE = SM_WAIT_FOR_BUTTON;
		}
		break;
 556:	00 00       	nop
 558:	03 c0       	rjmp	.+6      	; 0x560 <SM_Tick+0x11c>
		else if(A == 0x03)
		{
			C = 0;
			SM_STATE = SM_WAIT_BOTH_FALL;
		}
		break;
 55a:	00 00       	nop
 55c:	01 c0       	rjmp	.+2      	; 0x560 <SM_Tick+0x11c>
		else if(A == 0x03)
		{
			C = 0;
			SM_STATE = SM_WAIT_BOTH_FALL;
		}
		break;
 55e:	00 00       	nop
	}
}
 560:	00 00       	nop
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <main>:

int main(void)
{
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
	DDRC=0xFF; PORTC = 0x00;
 570:	87 e2       	ldi	r24, 0x27	; 39
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	2f ef       	ldi	r18, 0xFF	; 255
 576:	fc 01       	movw	r30, r24
 578:	20 83       	st	Z, r18
 57a:	88 e2       	ldi	r24, 0x28	; 40
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	fc 01       	movw	r30, r24
 580:	10 82       	st	Z, r1
	DDRD=0xFF; PORTD = 0x00;
 582:	8a e2       	ldi	r24, 0x2A	; 42
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	2f ef       	ldi	r18, 0xFF	; 255
 588:	fc 01       	movw	r30, r24
 58a:	20 83       	st	Z, r18
 58c:	8b e2       	ldi	r24, 0x2B	; 43
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	fc 01       	movw	r30, r24
 592:	10 82       	st	Z, r1
	DDRA=0x00; PORTA = 0xFF;
 594:	81 e2       	ldi	r24, 0x21	; 33
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	fc 01       	movw	r30, r24
 59a:	10 82       	st	Z, r1
 59c:	82 e2       	ldi	r24, 0x22	; 34
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	2f ef       	ldi	r18, 0xFF	; 255
 5a2:	fc 01       	movw	r30, r24
    
	
	LCD_init();
 5a4:	20 83       	st	Z, r18
	
	//LCD_DisplayString(1, "HELLO WORLD");
	
	// Init.
	SM_STATE = SM_WAIT_FOR_BUTTON;
 5a6:	9a dd       	rcall	.-1228   	; 0xdc <LCD_init>
 5a8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SM_STATE+0x1>
 5ac:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SM_STATE>
	C = 0x07;
 5b0:	87 e0       	ldi	r24, 0x07	; 7
 5b2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <C>
	PORTB = C;
 5b6:	85 e2       	ldi	r24, 0x25	; 37
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <C>
 5be:	fc 01       	movw	r30, r24

	TimerSet(1000);             // set Timer period
 5c0:	20 83       	st	Z, r18
 5c2:	68 ee       	ldi	r22, 0xE8	; 232
 5c4:	73 e0       	ldi	r23, 0x03	; 3
 5c6:	80 e0       	ldi	r24, 0x00	; 0
	TimerOn();                  // enable timer
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e df       	rcall	.-484    	; 0x3e8 <TimerSet>
	
	
    while (1) 
    {
		A = PINA & 0x03;
 5cc:	6a de       	rcall	.-812    	; 0x2a2 <TimerOn>
 5ce:	80 e2       	ldi	r24, 0x20	; 32
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	fc 01       	movw	r30, r24
 5d4:	80 81       	ld	r24, Z
 5d6:	83 70       	andi	r24, 0x03	; 3
		SM_Tick();
 5d8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		LCD_DisplayString(2, " 0xFACEBOOC");
 5dc:	33 df       	rcall	.-410    	; 0x444 <SM_Tick>
 5de:	64 e0       	ldi	r22, 0x04	; 4
		LCD_Cursor(1);
 5e0:	71 e0       	ldi	r23, 0x01	; 1
 5e2:	82 e0       	ldi	r24, 0x02	; 2
		LCD_WriteData(C + '0');
 5e4:	ef dd       	rcall	.-1058   	; 0x1c4 <LCD_DisplayString>
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	17 de       	rcall	.-978    	; 0x218 <LCD_Cursor>
 5ea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <C>
		while(!TimerFlag);
 5ee:	80 5d       	subi	r24, 0xD0	; 208
 5f0:	ba dd       	rcall	.-1164   	; 0x166 <LCD_WriteData>
 5f2:	00 00       	nop
 5f4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <TimerFlag>
		TimerFlag = 0;
 5f8:	88 23       	and	r24, r24
 5fa:	e1 f3       	breq	.-8      	; 0x5f4 <main+0x8c>
    }
 5fc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <TimerFlag>
 600:	e6 cf       	rjmp	.-52     	; 0x5ce <main+0x66>

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
