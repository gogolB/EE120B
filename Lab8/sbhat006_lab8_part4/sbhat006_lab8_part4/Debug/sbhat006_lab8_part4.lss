
sbhat006_lab8_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000891  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ce  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b0  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000412  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	13 d0       	rcall	.+38     	; 0xea <main>
  c4:	13 c1       	rjmp	.+550    	; 0x2ec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
 * Author : Gogol
 */ 

#include <avr/io.h>

void ADC_init() {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  d0:	8a e7       	ldi	r24, 0x7A	; 122
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2a e7       	ldi	r18, 0x7A	; 122
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	20 6e       	ori	r18, 0xE0	; 224
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	// ADEN: setting this bit enables analog-to-digital conversion.
	// ADSC: setting this bit starts the first conversion.
	// ADATE: setting this bit enables auto-triggering. Since we are
	//        in Free Running Mode, a new conversion will trigger whenever
	//        the previous conversion completes.
}
  e2:	00 00       	nop
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <main>:
unsigned short MAX = 128;
unsigned short MIN = 7;
unsigned short RANGE;

int main(void)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x6>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; PORTB = 0x00; // Output
  f4:	84 e2       	ldi	r24, 0x24	; 36
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	10 82       	st	Z, r1
	DDRA = 0x00; PORTA = 0xFF; // Input
 106:	81 e2       	ldi	r24, 0x21	; 33
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	10 82       	st	Z, r1
 10e:	82 e2       	ldi	r24, 0x22	; 34
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	fc 01       	movw	r30, r24
	
	ADC_init();
 116:	20 83       	st	Z, r18
	RANGE = MAX - MIN;
 118:	d7 df       	rcall	.-82     	; 0xc8 <ADC_init>
 11a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <MAX>
 11e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <MAX+0x1>
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <MIN>
 126:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <MIN+0x1>
 12a:	a9 01       	movw	r20, r18
 12c:	48 1b       	sub	r20, r24
 12e:	59 0b       	sbc	r21, r25
 130:	ca 01       	movw	r24, r20
 132:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
    /* Replace with your application code */
    while (1) 
    {
		unsigned short x = ADC;
 13a:	88 e7       	ldi	r24, 0x78	; 120
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	91 81       	ldd	r25, Z+1	; 0x01
 144:	9a 83       	std	Y+2, r25	; 0x02
		if(x <= MIN)
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <MIN>
 14c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <MIN+0x1>
 150:	29 81       	ldd	r18, Y+1	; 0x01
 152:	3a 81       	ldd	r19, Y+2	; 0x02
 154:	82 17       	cp	r24, r18
 156:	93 07       	cpc	r25, r19
			PORTB = 0x00;
 158:	20 f0       	brcs	.+8      	; 0x162 <main+0x78>
 15a:	85 e2       	ldi	r24, 0x25	; 37
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
		if(x > RANGE/8)
 160:	10 82       	st	Z, r1
 162:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 166:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 16a:	9c 01       	movw	r18, r24
 16c:	36 95       	lsr	r19
 16e:	27 95       	ror	r18
 170:	36 95       	lsr	r19
 172:	27 95       	ror	r18
 174:	36 95       	lsr	r19
 176:	27 95       	ror	r18
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	9a 81       	ldd	r25, Y+2	; 0x02
 17c:	28 17       	cp	r18, r24
 17e:	39 07       	cpc	r19, r25
			PORTB = 0x01;
 180:	28 f4       	brcc	.+10     	; 0x18c <main+0xa2>
 182:	85 e2       	ldi	r24, 0x25	; 37
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	fc 01       	movw	r30, r24
		if(x > (RANGE * 2) / 8)
 18a:	20 83       	st	Z, r18
 18c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 190:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	9c 01       	movw	r18, r24
 19a:	36 95       	lsr	r19
 19c:	27 95       	ror	r18
 19e:	36 95       	lsr	r19
 1a0:	27 95       	ror	r18
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	28 17       	cp	r18, r24
 1ac:	39 07       	cpc	r19, r25
			PORTB = 0x03;
 1ae:	28 f4       	brcc	.+10     	; 0x1ba <main+0xd0>
 1b0:	85 e2       	ldi	r24, 0x25	; 37
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	23 e0       	ldi	r18, 0x03	; 3
 1b6:	fc 01       	movw	r30, r24
		if(x > (RANGE * 3) / 8)
 1b8:	20 83       	st	Z, r18
 1ba:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 1be:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 1c2:	c9 01       	movw	r24, r18
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	82 0f       	add	r24, r18
 1ca:	93 1f       	adc	r25, r19
 1cc:	9c 01       	movw	r18, r24
 1ce:	36 95       	lsr	r19
 1d0:	27 95       	ror	r18
 1d2:	36 95       	lsr	r19
 1d4:	27 95       	ror	r18
 1d6:	36 95       	lsr	r19
 1d8:	27 95       	ror	r18
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	28 17       	cp	r18, r24
 1e0:	39 07       	cpc	r19, r25
			PORTB = 0x07;
 1e2:	28 f4       	brcc	.+10     	; 0x1ee <main+0x104>
 1e4:	85 e2       	ldi	r24, 0x25	; 37
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	27 e0       	ldi	r18, 0x07	; 7
 1ea:	fc 01       	movw	r30, r24
		if(x > (RANGE * 4) / 8)
 1ec:	20 83       	st	Z, r18
 1ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	9c 01       	movw	r18, r24
 200:	36 95       	lsr	r19
 202:	27 95       	ror	r18
 204:	36 95       	lsr	r19
 206:	27 95       	ror	r18
 208:	36 95       	lsr	r19
 20a:	27 95       	ror	r18
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	28 17       	cp	r18, r24
 212:	39 07       	cpc	r19, r25
			PORTB = 0x0F;
 214:	28 f4       	brcc	.+10     	; 0x220 <main+0x136>
 216:	85 e2       	ldi	r24, 0x25	; 37
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	2f e0       	ldi	r18, 0x0F	; 15
 21c:	fc 01       	movw	r30, r24
		if(x > (RANGE * 5) / 8)
 21e:	20 83       	st	Z, r18
 220:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 224:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 228:	c9 01       	movw	r24, r18
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	82 0f       	add	r24, r18
 234:	93 1f       	adc	r25, r19
 236:	9c 01       	movw	r18, r24
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	36 95       	lsr	r19
 23e:	27 95       	ror	r18
 240:	36 95       	lsr	r19
 242:	27 95       	ror	r18
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	9a 81       	ldd	r25, Y+2	; 0x02
 248:	28 17       	cp	r18, r24
 24a:	39 07       	cpc	r19, r25
			PORTB = 0x1F;
 24c:	28 f4       	brcc	.+10     	; 0x258 <main+0x16e>
 24e:	85 e2       	ldi	r24, 0x25	; 37
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	2f e1       	ldi	r18, 0x1F	; 31
 254:	fc 01       	movw	r30, r24
		if(x > (RANGE * 6) / 8)
 256:	20 83       	st	Z, r18
 258:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 25c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 260:	c9 01       	movw	r24, r18
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	82 0f       	add	r24, r18
 268:	93 1f       	adc	r25, r19
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	9c 01       	movw	r18, r24
 270:	36 95       	lsr	r19
 272:	27 95       	ror	r18
 274:	36 95       	lsr	r19
 276:	27 95       	ror	r18
 278:	36 95       	lsr	r19
 27a:	27 95       	ror	r18
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	28 17       	cp	r18, r24
 282:	39 07       	cpc	r19, r25
			PORTB = 0x3F;
 284:	28 f4       	brcc	.+10     	; 0x290 <main+0x1a6>
 286:	85 e2       	ldi	r24, 0x25	; 37
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2f e3       	ldi	r18, 0x3F	; 63
 28c:	fc 01       	movw	r30, r24
		if(x > (RANGE * 7) / 8)
 28e:	20 83       	st	Z, r18
 290:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 294:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 298:	c9 01       	movw	r24, r18
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	82 1b       	sub	r24, r18
 2a8:	93 0b       	sbc	r25, r19
 2aa:	9c 01       	movw	r18, r24
 2ac:	36 95       	lsr	r19
 2ae:	27 95       	ror	r18
 2b0:	36 95       	lsr	r19
 2b2:	27 95       	ror	r18
 2b4:	36 95       	lsr	r19
 2b6:	27 95       	ror	r18
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	9a 81       	ldd	r25, Y+2	; 0x02
 2bc:	28 17       	cp	r18, r24
 2be:	39 07       	cpc	r19, r25
			PORTB = 0x7F;
 2c0:	28 f4       	brcc	.+10     	; 0x2cc <main+0x1e2>
 2c2:	85 e2       	ldi	r24, 0x25	; 37
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	2f e7       	ldi	r18, 0x7F	; 127
 2c8:	fc 01       	movw	r30, r24
		if(x > MAX)
 2ca:	20 83       	st	Z, r18
 2cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MAX>
 2d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MAX+0x1>
 2d4:	29 81       	ldd	r18, Y+1	; 0x01
 2d6:	3a 81       	ldd	r19, Y+2	; 0x02
 2d8:	82 17       	cp	r24, r18
 2da:	93 07       	cpc	r25, r19
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <main+0x1f6>
			PORTB = 0xFF;
 2de:	2d cf       	rjmp	.-422    	; 0x13a <main+0x50>
 2e0:	85 e2       	ldi	r24, 0x25	; 37
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	fc 01       	movw	r30, r24
    }
 2e8:	20 83       	st	Z, r18
 2ea:	27 cf       	rjmp	.-434    	; 0x13a <main+0x50>

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
