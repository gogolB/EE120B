
adu003_lab1_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000d4  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000d6  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007a  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000117  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000160  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000aa  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	1a c0       	rjmp	.+52     	; 0xd0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:


#include <avr/io.h>
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // Configure port B's 8 pins as outputs,
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
	unsigned char spaceFree = 0x04; // Temporary variable to hold the value of B
	unsigned char spaceUsed = 0x00; // Temporary variable to hold the value of A
	while(1)
	{
		// 1) Read input
		spaceUsed = PINA & 0x0F;
  a8:	54 e0       	ldi	r21, 0x04	; 4
		spaceFree = 4;
		// 2) Perform computation
		unsigned char tmp = 0x01;
  aa:	61 e0       	ldi	r22, 0x01	; 1
			if((spaceUsed & tmp) != 0)
			spaceFree = spaceFree - 0x01;
			tmp = tmp << 1;
		}
		if(spaceFree == 0)
			spaceFree = spaceFree | 0x80;
  ac:	70 e8       	ldi	r23, 0x80	; 128
	unsigned char spaceFree = 0x04; // Temporary variable to hold the value of B
	unsigned char spaceUsed = 0x00; // Temporary variable to hold the value of A
	while(1)
	{
		// 1) Read input
		spaceUsed = PINA & 0x0F;
  ae:	40 b1       	in	r20, 0x00	; 0
  b0:	4f 70       	andi	r20, 0x0F	; 15
  b2:	95 2f       	mov	r25, r21
		spaceFree = 4;
		// 2) Perform computation
		unsigned char tmp = 0x01;
  b4:	86 2f       	mov	r24, r22
	unsigned char spaceUsed = 0x00; // Temporary variable to hold the value of A
	while(1)
	{
		// 1) Read input
		spaceUsed = PINA & 0x0F;
		spaceFree = 4;
  b6:	35 2f       	mov	r19, r21
		// 2) Perform computation
		unsigned char tmp = 0x01;
		for(unsigned char i = 0; i < 4; i++)
		{
			if((spaceUsed & tmp) != 0)
  b8:	28 2f       	mov	r18, r24
  ba:	24 23       	and	r18, r20
  bc:	09 f0       	breq	.+2      	; 0xc0 <main+0x22>
			spaceFree = spaceFree - 0x01;
  be:	31 50       	subi	r19, 0x01	; 1
			tmp = tmp << 1;
  c0:	88 0f       	add	r24, r24
  c2:	91 50       	subi	r25, 0x01	; 1
		// 1) Read input
		spaceUsed = PINA & 0x0F;
		spaceFree = 4;
		// 2) Perform computation
		unsigned char tmp = 0x01;
		for(unsigned char i = 0; i < 4; i++)
  c4:	c9 f7       	brne	.-14     	; 0xb8 <main+0x1a>
		{
			if((spaceUsed & tmp) != 0)
			spaceFree = spaceFree - 0x01;
			tmp = tmp << 1;
		}
		if(spaceFree == 0)
  c6:	31 11       	cpse	r19, r1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <main+0x2e>
			spaceFree = spaceFree | 0x80;
  ca:	37 2f       	mov	r19, r23
		PORTC = spaceFree;
  cc:	38 b9       	out	0x08, r19	; 8
			
	}
  ce:	ef cf       	rjmp	.-34     	; 0xae <main+0x10>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
