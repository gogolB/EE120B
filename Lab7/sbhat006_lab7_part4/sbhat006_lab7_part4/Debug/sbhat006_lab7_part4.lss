
sbhat006_lab7_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000076a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080010c  0080010c  0000080a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aff  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081b  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063d  00000000  00000000  00001c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005de  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034c  00000000  00000000  000029da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002d26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	8b c0       	rjmp	.+278    	; 0x14c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	18 d3       	rcall	.+1584   	; 0x6f4 <main>
  c4:	50 c3       	rjmp	.+1696   	; 0x766 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2b e0       	ldi	r18, 0x0B	; 11
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2d e7       	ldi	r18, 0x7D	; 125
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	31 83       	std	Z+1, r19	; 0x01
  e6:	20 83       	st	Z, r18
  e8:	8f e6       	ldi	r24, 0x6F	; 111
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
  fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_M>
 100:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_M+0x1>
 104:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_M+0x2>
 108:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_M+0x3>
 10c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 110:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 114:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 118:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 11c:	8f e5       	ldi	r24, 0x5F	; 95
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2f e5       	ldi	r18, 0x5F	; 95
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	20 68       	ori	r18, 0x80	; 128
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	00 00       	nop
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <TimerISR>:

void TimerISR() {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
 144:	00 00       	nop
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 15c:	0f 92       	push	r0
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 17e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 182:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 186:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 18a:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	a1 09       	sbc	r26, r1
 192:	b1 09       	sbc	r27, r1
 194:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 198:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 19c:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 1a0:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 1a4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 1a8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 1ac:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 1b0:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 1b4:	89 2b       	or	r24, r25
 1b6:	8a 2b       	or	r24, r26
 1b8:	8b 2b       	or	r24, r27
		TimerISR(); // Call the ISR that the user uses
 1ba:	89 f4       	brne	.+34     	; 0x1de <__vector_13+0x92>
		_avr_timer_cntcurr = _avr_timer_M;
 1bc:	bc df       	rcall	.-136    	; 0x136 <TimerISR>
 1be:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_M>
 1c2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_M+0x1>
 1c6:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_M+0x2>
 1ca:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_M+0x3>
 1ce:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 1d2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 1d6:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 1da:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	}
}
 1de:	00 00       	nop
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 202:	0f 90       	pop	r0
 204:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	00 d0       	rcall	.+0      	; 0x214 <TimerSet+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <TimerSet+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	69 83       	std	Y+1, r22	; 0x01
 21c:	7a 83       	std	Y+2, r23	; 0x02
 21e:	8b 83       	std	Y+3, r24	; 0x03
 220:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	ab 81       	ldd	r26, Y+3	; 0x03
 228:	bc 81       	ldd	r27, Y+4	; 0x04
 22a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_M>
 22e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_M+0x1>
 232:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_M+0x2>
 236:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 23a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_M>
 23e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_M+0x1>
 242:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_M+0x2>
 246:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_M+0x3>
 24a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 24e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 252:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 256:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
}
 25a:	00 00       	nop
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <TICK_3LED>:

void TICK_3LED()
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
	// transitions
	switch(STATE_3LED)
 272:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <STATE_3LED>
 276:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <STATE_3LED+0x1>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	91 05       	cpc	r25, r1
 27e:	e1 f0       	breq	.+56     	; 0x2b8 <TICK_3LED+0x4e>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	91 05       	cpc	r25, r1
 284:	18 f0       	brcs	.+6      	; 0x28c <TICK_3LED+0x22>
 286:	02 97       	sbiw	r24, 0x02	; 2
 288:	69 f1       	breq	.+90     	; 0x2e4 <TICK_3LED+0x7a>
 28a:	45 c0       	rjmp	.+138    	; 0x316 <TICK_3LED+0xac>
	{
		case LED1:
			if(count_3LED > transitionTime_3LED)
 28c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <count_3LED>
 290:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <count_3LED+0x1>
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 298:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 29c:	82 17       	cp	r24, r18
 29e:	93 07       	cpc	r25, r19
 2a0:	a8 f5       	brcc	.+106    	; 0x30c <TICK_3LED+0xa2>
			{
				STATE_3LED = LED2;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <STATE_3LED+0x1>
 2aa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <STATE_3LED>
				count_3LED = 0;
 2ae:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <count_3LED+0x1>
 2b2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <count_3LED>
			}
		break;
 2b6:	2a c0       	rjmp	.+84     	; 0x30c <TICK_3LED+0xa2>
		
		case LED2:
			if(count_3LED > transitionTime_3LED)
 2b8:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <count_3LED>
 2bc:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <count_3LED+0x1>
 2c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2c8:	82 17       	cp	r24, r18
 2ca:	93 07       	cpc	r25, r19
 2cc:	08 f5       	brcc	.+66     	; 0x310 <TICK_3LED+0xa6>
			{
				STATE_3LED = LED3;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <STATE_3LED+0x1>
 2d6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <STATE_3LED>
				count_3LED = 0;
 2da:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <count_3LED+0x1>
 2de:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <count_3LED>
				
			}
		break;
 2e2:	16 c0       	rjmp	.+44     	; 0x310 <TICK_3LED+0xa6>
		
		case LED3:
			if(count_3LED > transitionTime_3LED)
 2e4:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <count_3LED>
 2e8:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <count_3LED+0x1>
 2ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2f4:	82 17       	cp	r24, r18
 2f6:	93 07       	cpc	r25, r19
 2f8:	68 f4       	brcc	.+26     	; 0x314 <TICK_3LED+0xaa>
			{
				STATE_3LED = LED1;
 2fa:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <STATE_3LED+0x1>
 2fe:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <STATE_3LED>
				count_3LED = 0;
 302:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <count_3LED+0x1>
 306:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <count_3LED>
			}
		break;
 30a:	04 c0       	rjmp	.+8      	; 0x314 <TICK_3LED+0xaa>
			if(count_3LED > transitionTime_3LED)
			{
				STATE_3LED = LED2;
				count_3LED = 0;
			}
		break;
 30c:	00 00       	nop
 30e:	03 c0       	rjmp	.+6      	; 0x316 <TICK_3LED+0xac>
			{
				STATE_3LED = LED3;
				count_3LED = 0;
				
			}
		break;
 310:	00 00       	nop
 312:	01 c0       	rjmp	.+2      	; 0x316 <TICK_3LED+0xac>
			if(count_3LED > transitionTime_3LED)
			{
				STATE_3LED = LED1;
				count_3LED = 0;
			}
		break;
 314:	00 00       	nop
		
	}
	
	// Actions
	switch(STATE_3LED)
 316:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <STATE_3LED>
 31a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <STATE_3LED+0x1>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	91 05       	cpc	r25, r1
 322:	99 f0       	breq	.+38     	; 0x34a <TICK_3LED+0xe0>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	91 05       	cpc	r25, r1
 328:	18 f0       	brcs	.+6      	; 0x330 <TICK_3LED+0xc6>
 32a:	02 97       	sbiw	r24, 0x02	; 2
 32c:	d9 f0       	breq	.+54     	; 0x364 <TICK_3LED+0xfa>
			threeLEDs = 0x04;
			count_3LED++;
		break;
	}
	
}
 32e:	27 c0       	rjmp	.+78     	; 0x37e <TICK_3LED+0x114>
	
	// Actions
	switch(STATE_3LED)
	{
		case LED1:
			threeLEDs = 0x01;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <threeLEDs>
			count_3LED++;
 336:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count_3LED>
 33a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count_3LED+0x1>
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <count_3LED+0x1>
 344:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count_3LED>
		break;
 348:	1a c0       	rjmp	.+52     	; 0x37e <TICK_3LED+0x114>
		
		case LED2:
			threeLEDs = 0x02;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <threeLEDs>
			count_3LED++;
 350:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count_3LED>
 354:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count_3LED+0x1>
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <count_3LED+0x1>
 35e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count_3LED>
		break;
 362:	0d c0       	rjmp	.+26     	; 0x37e <TICK_3LED+0x114>
		
		case LED3:
			threeLEDs = 0x04;
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <threeLEDs>
			count_3LED++;
 36a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count_3LED>
 36e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count_3LED+0x1>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <count_3LED+0x1>
 378:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count_3LED>
		break;
 37c:	00 00       	nop
	}
	
}
 37e:	00 00       	nop
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <TICK_BLINK>:

void TICK_BLINK()
{
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
	// Transitions
	switch(STATE_BLINK)
 38e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <STATE_BLINK>
 392:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <STATE_BLINK+0x1>
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	19 f0       	breq	.+6      	; 0x3a0 <TICK_BLINK+0x1a>
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	b9 f0       	breq	.+46     	; 0x3cc <TICK_BLINK+0x46>
 39e:	2d c0       	rjmp	.+90     	; 0x3fa <TICK_BLINK+0x74>
	{
		case LED_ON:
			if(count_BlinkLED > transitionTIme_BlinkLED)
 3a0:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <count_BlinkLED>
 3a4:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <count_BlinkLED+0x1>
 3a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <transitionTIme_BlinkLED>
 3ac:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <transitionTIme_BlinkLED+0x1>
 3b0:	82 17       	cp	r24, r18
 3b2:	93 07       	cpc	r25, r19
 3b4:	f8 f4       	brcc	.+62     	; 0x3f4 <TICK_BLINK+0x6e>
			{
				STATE_BLINK = LED_OFF;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <STATE_BLINK+0x1>
 3be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <STATE_BLINK>
				count_BlinkLED = 0;
 3c2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <count_BlinkLED+0x1>
 3c6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <count_BlinkLED>
			}
		break;
 3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <TICK_BLINK+0x6e>
		
		case LED_OFF:
			if(count_BlinkLED > transitionTIme_BlinkLED)
 3cc:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <count_BlinkLED>
 3d0:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <count_BlinkLED+0x1>
 3d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <transitionTIme_BlinkLED>
 3d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <transitionTIme_BlinkLED+0x1>
 3dc:	82 17       	cp	r24, r18
 3de:	93 07       	cpc	r25, r19
 3e0:	58 f4       	brcc	.+22     	; 0x3f8 <TICK_BLINK+0x72>
			{
				STATE_BLINK = LED_ON;
 3e2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <STATE_BLINK+0x1>
 3e6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <STATE_BLINK>
				count_BlinkLED = 0;
 3ea:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <count_BlinkLED+0x1>
 3ee:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <count_BlinkLED>
			}
		break;
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <TICK_BLINK+0x72>
			if(count_BlinkLED > transitionTIme_BlinkLED)
			{
				STATE_BLINK = LED_OFF;
				count_BlinkLED = 0;
			}
		break;
 3f4:	00 00       	nop
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <TICK_BLINK+0x74>
			if(count_BlinkLED > transitionTIme_BlinkLED)
			{
				STATE_BLINK = LED_ON;
				count_BlinkLED = 0;
			}
		break;
 3f8:	00 00       	nop
		
	}
	
	// Actions
	switch(STATE_BLINK)
 3fa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <STATE_BLINK>
 3fe:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <STATE_BLINK+0x1>
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	19 f0       	breq	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	71 f0       	breq	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		case LED_OFF:
			blinkingLED = 0x00;
			count_BlinkLED++;
		break;
	}
}
 40a:	19 c0       	rjmp	.+50     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	
	// Actions
	switch(STATE_BLINK)
	{
		case LED_ON:
			blinkingLED = 0x08;
 40c:	88 e0       	ldi	r24, 0x08	; 8
 40e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <blinkingLED>
			count_BlinkLED++;
 412:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <count_BlinkLED>
 416:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <count_BlinkLED+0x1>
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <count_BlinkLED+0x1>
 420:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <count_BlinkLED>
		break;
 424:	0c c0       	rjmp	.+24     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		
		case LED_OFF:
			blinkingLED = 0x00;
 426:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <blinkingLED>
			count_BlinkLED++;
 42a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <count_BlinkLED>
 42e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <count_BlinkLED+0x1>
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <count_BlinkLED+0x1>
 438:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <count_BlinkLED>
		break;
 43c:	00 00       	nop
	}
}
 43e:	00 00       	nop
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <TICK_SOUND>:

void TICK_SOUND()
{
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
	// Transitions
	switch(STATE_SOUND)
 44e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <STATE_SOUND>
 452:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <STATE_SOUND+0x1>
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	91 05       	cpc	r25, r1
 45a:	09 f4       	brne	.+2      	; 0x45e <TICK_SOUND+0x18>
 45c:	45 c0       	rjmp	.+138    	; 0x4e8 <TICK_SOUND+0xa2>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	91 05       	cpc	r25, r1
 462:	b8 f0       	brcs	.+46     	; 0x492 <TICK_SOUND+0x4c>
 464:	02 97       	sbiw	r24, 0x02	; 2
 466:	09 f0       	breq	.+2      	; 0x46a <TICK_SOUND+0x24>
 468:	6d c0       	rjmp	.+218    	; 0x544 <TICK_SOUND+0xfe>
	{
		case SOUND_WAIT:
			if((PINA & 0x04) == 0x04)
 46a:	80 e2       	ldi	r24, 0x20	; 32
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	fc 01       	movw	r30, r24
 470:	80 81       	ld	r24, Z
 472:	88 2f       	mov	r24, r24
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	84 70       	andi	r24, 0x04	; 4
 478:	99 27       	eor	r25, r25
 47a:	89 2b       	or	r24, r25
 47c:	09 f4       	brne	.+2      	; 0x480 <TICK_SOUND+0x3a>
 47e:	5d c0       	rjmp	.+186    	; 0x53a <TICK_SOUND+0xf4>
			{
				STATE_SOUND = SOUND_ON;
 480:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <STATE_SOUND+0x1>
 484:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <STATE_SOUND>
				count_Sound = 0;
 488:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <count_Sound+0x1>
 48c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <count_Sound>
			}
		break;
 490:	54 c0       	rjmp	.+168    	; 0x53a <TICK_SOUND+0xf4>
		
		case SOUND_ON:
			if((PINA & 0x04) == 0x00)
 492:	80 e2       	ldi	r24, 0x20	; 32
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	fc 01       	movw	r30, r24
 498:	80 81       	ld	r24, Z
 49a:	88 2f       	mov	r24, r24
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	84 70       	andi	r24, 0x04	; 4
 4a0:	99 27       	eor	r25, r25
 4a2:	89 2b       	or	r24, r25
 4a4:	59 f4       	brne	.+22     	; 0x4bc <TICK_SOUND+0x76>
			{
				STATE_SOUND = SOUND_WAIT;
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <STATE_SOUND+0x1>
 4ae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <STATE_SOUND>
				count_Sound = 0;
 4b2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <count_Sound+0x1>
 4b6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <count_Sound>
			else if(count_Sound > transitionTime_sound)
			{
				STATE_SOUND = SOUND_OFF;
				count_Sound = 0;
			}
		break;
 4ba:	41 c0       	rjmp	.+130    	; 0x53e <TICK_SOUND+0xf8>
			if((PINA & 0x04) == 0x00)
			{
				STATE_SOUND = SOUND_WAIT;
				count_Sound = 0;
			}
			else if(count_Sound > transitionTime_sound)
 4bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <transitionTime_sound>
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <count_Sound>
 4c8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <count_Sound+0x1>
 4cc:	28 17       	cp	r18, r24
 4ce:	39 07       	cpc	r19, r25
 4d0:	b0 f5       	brcc	.+108    	; 0x53e <TICK_SOUND+0xf8>
			{
				STATE_SOUND = SOUND_OFF;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <STATE_SOUND+0x1>
 4da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <STATE_SOUND>
				count_Sound = 0;
 4de:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <count_Sound+0x1>
 4e2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <count_Sound>
			}
		break;
 4e6:	2b c0       	rjmp	.+86     	; 0x53e <TICK_SOUND+0xf8>
		
		case SOUND_OFF:
			if((PINA & 0x04) == 0x00)
 4e8:	80 e2       	ldi	r24, 0x20	; 32
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	fc 01       	movw	r30, r24
 4ee:	80 81       	ld	r24, Z
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	84 70       	andi	r24, 0x04	; 4
 4f6:	99 27       	eor	r25, r25
 4f8:	89 2b       	or	r24, r25
 4fa:	59 f4       	brne	.+22     	; 0x512 <TICK_SOUND+0xcc>
			{
				STATE_SOUND = SOUND_WAIT;
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <STATE_SOUND+0x1>
 504:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <STATE_SOUND>
				count_Sound = 0;
 508:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <count_Sound+0x1>
 50c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <count_Sound>
			else if(count_Sound > transitionTime_sound)
			{
				STATE_SOUND = SOUND_ON;
				count_Sound = 0;
			}
		break;		
 510:	18 c0       	rjmp	.+48     	; 0x542 <TICK_SOUND+0xfc>
			if((PINA & 0x04) == 0x00)
			{
				STATE_SOUND = SOUND_WAIT;
				count_Sound = 0;
			}
			else if(count_Sound > transitionTime_sound)
 512:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <transitionTime_sound>
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <count_Sound>
 51e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <count_Sound+0x1>
 522:	28 17       	cp	r18, r24
 524:	39 07       	cpc	r19, r25
 526:	68 f4       	brcc	.+26     	; 0x542 <TICK_SOUND+0xfc>
			{
				STATE_SOUND = SOUND_ON;
 528:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <STATE_SOUND+0x1>
 52c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <STATE_SOUND>
				count_Sound = 0;
 530:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <count_Sound+0x1>
 534:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <count_Sound>
			}
		break;		
 538:	04 c0       	rjmp	.+8      	; 0x542 <TICK_SOUND+0xfc>
			if((PINA & 0x04) == 0x04)
			{
				STATE_SOUND = SOUND_ON;
				count_Sound = 0;
			}
		break;
 53a:	00 00       	nop
 53c:	03 c0       	rjmp	.+6      	; 0x544 <TICK_SOUND+0xfe>
			else if(count_Sound > transitionTime_sound)
			{
				STATE_SOUND = SOUND_OFF;
				count_Sound = 0;
			}
		break;
 53e:	00 00       	nop
 540:	01 c0       	rjmp	.+2      	; 0x544 <TICK_SOUND+0xfe>
			else if(count_Sound > transitionTime_sound)
			{
				STATE_SOUND = SOUND_ON;
				count_Sound = 0;
			}
		break;		
 542:	00 00       	nop
		
	}
	// Action
	switch(STATE_SOUND)
 544:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <STATE_SOUND>
 548:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <STATE_SOUND+0x1>
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	91 05       	cpc	r25, r1
 550:	b1 f0       	breq	.+44     	; 0x57e <TICK_SOUND+0x138>
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	91 05       	cpc	r25, r1
 556:	30 f0       	brcs	.+12     	; 0x564 <TICK_SOUND+0x11e>
 558:	02 97       	sbiw	r24, 0x02	; 2
 55a:	09 f0       	breq	.+2      	; 0x55e <TICK_SOUND+0x118>
		case SOUND_OFF:
			sound = 0x00;
			count_Sound++;
		break;
	}
}
 55c:	1c c0       	rjmp	.+56     	; 0x596 <TICK_SOUND+0x150>
	}
	// Action
	switch(STATE_SOUND)
	{
		case SOUND_WAIT:
			sound = 0x00;
 55e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <sound>
		break;
 562:	19 c0       	rjmp	.+50     	; 0x596 <TICK_SOUND+0x150>
		
		case SOUND_ON:
			sound = 0x10;
 564:	80 e1       	ldi	r24, 0x10	; 16
 566:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <sound>
			count_Sound++;
 56a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <count_Sound>
 56e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <count_Sound+0x1>
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <count_Sound+0x1>
 578:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <count_Sound>
		break;
 57c:	0c c0       	rjmp	.+24     	; 0x596 <TICK_SOUND+0x150>
		
		case SOUND_OFF:
			sound = 0x00;
 57e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <sound>
			count_Sound++;
 582:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <count_Sound>
 586:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <count_Sound+0x1>
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <count_Sound+0x1>
 590:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <count_Sound>
		break;
 594:	00 00       	nop
	}
}
 596:	00 00       	nop
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <TICK_FRQ>:

void TICK_FRQ()
{
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
	// Transitions
	switch(STATE_FRQ)
 5a6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <STATE_FRQ>
 5aa:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <STATE_FRQ+0x1>
 5ae:	82 30       	cpi	r24, 0x02	; 2
 5b0:	91 05       	cpc	r25, r1
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <TICK_FRQ+0x18>
 5b4:	53 c0       	rjmp	.+166    	; 0x65c <TICK_FRQ+0xbe>
 5b6:	83 30       	cpi	r24, 0x03	; 3
 5b8:	91 05       	cpc	r25, r1
 5ba:	28 f4       	brcc	.+10     	; 0x5c6 <TICK_FRQ+0x28>
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	51 f0       	breq	.+20     	; 0x5d4 <TICK_FRQ+0x36>
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	51 f1       	breq	.+84     	; 0x618 <TICK_FRQ+0x7a>
 5c4:	5a c0       	rjmp	.+180    	; 0x67a <TICK_FRQ+0xdc>
 5c6:	83 30       	cpi	r24, 0x03	; 3
 5c8:	91 05       	cpc	r25, r1
 5ca:	b9 f1       	breq	.+110    	; 0x63a <TICK_FRQ+0x9c>
 5cc:	04 97       	sbiw	r24, 0x04	; 4
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <TICK_FRQ+0x34>
 5d0:	4a c0       	rjmp	.+148    	; 0x666 <TICK_FRQ+0xc8>
 5d2:	53 c0       	rjmp	.+166    	; 0x67a <TICK_FRQ+0xdc>
	{
		case FRQ_WAIT:
			if((PINA & 0x01) == 0x01)
 5d4:	80 e2       	ldi	r24, 0x20	; 32
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	fc 01       	movw	r30, r24
 5da:	80 81       	ld	r24, Z
 5dc:	88 2f       	mov	r24, r24
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	81 70       	andi	r24, 0x01	; 1
 5e2:	99 27       	eor	r25, r25
 5e4:	89 2b       	or	r24, r25
 5e6:	39 f0       	breq	.+14     	; 0x5f6 <TICK_FRQ+0x58>
			{
				STATE_FRQ = FRQ_UP_RE;
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <STATE_FRQ+0x1>
 5f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <STATE_FRQ>
			}
			else if((PINA & 0x02) == 0x02)
			{
				STATE_FRQ = FRQ_DOWN_RE;
			}
		break;
 5f4:	3d c0       	rjmp	.+122    	; 0x670 <TICK_FRQ+0xd2>
		case FRQ_WAIT:
			if((PINA & 0x01) == 0x01)
			{
				STATE_FRQ = FRQ_UP_RE;
			}
			else if((PINA & 0x02) == 0x02)
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	fc 01       	movw	r30, r24
 5fc:	80 81       	ld	r24, Z
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	82 70       	andi	r24, 0x02	; 2
 604:	99 27       	eor	r25, r25
 606:	89 2b       	or	r24, r25
 608:	99 f1       	breq	.+102    	; 0x670 <TICK_FRQ+0xd2>
			{
				STATE_FRQ = FRQ_DOWN_RE;
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <STATE_FRQ+0x1>
 612:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <STATE_FRQ>
			}
		break;
 616:	2c c0       	rjmp	.+88     	; 0x670 <TICK_FRQ+0xd2>
		
		case FRQ_UP_RE:
			if((PINA & 0x01) == 0x00)
 618:	80 e2       	ldi	r24, 0x20	; 32
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	fc 01       	movw	r30, r24
 61e:	80 81       	ld	r24, Z
 620:	88 2f       	mov	r24, r24
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	81 70       	andi	r24, 0x01	; 1
 626:	99 27       	eor	r25, r25
 628:	89 2b       	or	r24, r25
 62a:	21 f5       	brne	.+72     	; 0x674 <TICK_FRQ+0xd6>
			{
				STATE_FRQ = FRQ_UP_FE;
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <STATE_FRQ+0x1>
 634:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <STATE_FRQ>
			}
		break;
 638:	1d c0       	rjmp	.+58     	; 0x674 <TICK_FRQ+0xd6>
		
		case FRQ_DOWN_RE:
			if((PINA & 0x02) == 0x00)
 63a:	80 e2       	ldi	r24, 0x20	; 32
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	fc 01       	movw	r30, r24
 640:	80 81       	ld	r24, Z
 642:	88 2f       	mov	r24, r24
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	82 70       	andi	r24, 0x02	; 2
 648:	99 27       	eor	r25, r25
 64a:	89 2b       	or	r24, r25
 64c:	a9 f4       	brne	.+42     	; 0x678 <TICK_FRQ+0xda>
			{
				STATE_FRQ = FRQ_DOWN_FE;
 64e:	84 e0       	ldi	r24, 0x04	; 4
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <STATE_FRQ+0x1>
 656:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <STATE_FRQ>
			}
		break;
 65a:	0e c0       	rjmp	.+28     	; 0x678 <TICK_FRQ+0xda>
		
		case FRQ_UP_FE:
			STATE_FRQ = FRQ_WAIT;
 65c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <STATE_FRQ+0x1>
 660:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <STATE_FRQ>
		break;
 664:	0a c0       	rjmp	.+20     	; 0x67a <TICK_FRQ+0xdc>
		
		case FRQ_DOWN_FE:
			STATE_FRQ = FRQ_WAIT;
 666:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <STATE_FRQ+0x1>
 66a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <STATE_FRQ>
		break;	
 66e:	05 c0       	rjmp	.+10     	; 0x67a <TICK_FRQ+0xdc>
			}
			else if((PINA & 0x02) == 0x02)
			{
				STATE_FRQ = FRQ_DOWN_RE;
			}
		break;
 670:	00 00       	nop
 672:	03 c0       	rjmp	.+6      	; 0x67a <TICK_FRQ+0xdc>
		case FRQ_UP_RE:
			if((PINA & 0x01) == 0x00)
			{
				STATE_FRQ = FRQ_UP_FE;
			}
		break;
 674:	00 00       	nop
 676:	01 c0       	rjmp	.+2      	; 0x67a <TICK_FRQ+0xdc>
		case FRQ_DOWN_RE:
			if((PINA & 0x02) == 0x00)
			{
				STATE_FRQ = FRQ_DOWN_FE;
			}
		break;
 678:	00 00       	nop
		case FRQ_DOWN_FE:
			STATE_FRQ = FRQ_WAIT;
		break;	
	}
	// Actions
	switch(STATE_FRQ)
 67a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <STATE_FRQ>
 67e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <STATE_FRQ+0x1>
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	91 05       	cpc	r25, r1
 686:	79 f0       	breq	.+30     	; 0x6a6 <TICK_FRQ+0x108>
 688:	04 97       	sbiw	r24, 0x04	; 4
 68a:	09 f0       	breq	.+2      	; 0x68e <TICK_FRQ+0xf0>
			if(transitionTime_sound > minTime)
				transitionTime_sound--;
		break;
		
	}
}
 68c:	1b c0       	rjmp	.+54     	; 0x6c4 <TICK_FRQ+0x126>
	}
	// Actions
	switch(STATE_FRQ)
	{
		case FRQ_DOWN_FE:
			if(transitionTime_sound < maxTIme)
 68e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <transitionTime_sound>
 692:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <maxTIme>
 696:	98 17       	cp	r25, r24
 698:	90 f4       	brcc	.+36     	; 0x6be <TICK_FRQ+0x120>
				transitionTime_sound++;
 69a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <transitionTime_sound>
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <transitionTime_sound>
		break;
 6a4:	0c c0       	rjmp	.+24     	; 0x6be <TICK_FRQ+0x120>
		case FRQ_UP_FE:
			if(transitionTime_sound > minTime)
 6a6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <transitionTime_sound>
 6aa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minTime>
 6ae:	89 17       	cp	r24, r25
 6b0:	40 f4       	brcc	.+16     	; 0x6c2 <TICK_FRQ+0x124>
				transitionTime_sound--;
 6b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <transitionTime_sound>
 6b6:	81 50       	subi	r24, 0x01	; 1
 6b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <transitionTime_sound>
		break;
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <TICK_FRQ+0x124>
	switch(STATE_FRQ)
	{
		case FRQ_DOWN_FE:
			if(transitionTime_sound < maxTIme)
				transitionTime_sound++;
		break;
 6be:	00 00       	nop
 6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <TICK_FRQ+0x126>
		case FRQ_UP_FE:
			if(transitionTime_sound > minTime)
				transitionTime_sound--;
		break;
 6c2:	00 00       	nop
		
	}
}
 6c4:	00 00       	nop
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <TICK_COMBINE_LED>:

void TICK_COMBINE_LED()
{
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
	PORTB = threeLEDs|blinkingLED|sound;
 6d4:	85 e2       	ldi	r24, 0x25	; 37
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <threeLEDs>
 6dc:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <blinkingLED>
 6e0:	32 2b       	or	r19, r18
 6e2:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <sound>
 6e6:	23 2b       	or	r18, r19
 6e8:	fc 01       	movw	r30, r24
 6ea:	20 83       	st	Z, r18
}
 6ec:	00 00       	nop
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	08 95       	ret

000006f4 <main>:

int main(void)
{
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; PORTB = 0x00;
 6fc:	84 e2       	ldi	r24, 0x24	; 36
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	2f ef       	ldi	r18, 0xFF	; 255
 702:	fc 01       	movw	r30, r24
 704:	20 83       	st	Z, r18
 706:	85 e2       	ldi	r24, 0x25	; 37
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	fc 01       	movw	r30, r24
 70c:	10 82       	st	Z, r1
	DDRA = 0x00; PORTA = 0xFF;
 70e:	81 e2       	ldi	r24, 0x21	; 33
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	fc 01       	movw	r30, r24
 714:	10 82       	st	Z, r1
 716:	82 e2       	ldi	r24, 0x22	; 34
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	2f ef       	ldi	r18, 0xFF	; 255
 71c:	fc 01       	movw	r30, r24
 71e:	20 83       	st	Z, r18
	
	TimerSet(1);             // set Timer period
 720:	61 e0       	ldi	r22, 0x01	; 1
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();                  // enable timer
 728:	72 dd       	rcall	.-1308   	; 0x20e <TimerSet>
 72a:	ce dc       	rcall	.-1636   	; 0xc8 <TimerOn>
	
	STATE_3LED = LED1;
 72c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <STATE_3LED+0x1>
 730:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <STATE_3LED>
	STATE_BLINK = LED_OFF;
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <STATE_BLINK+0x1>
 73c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <STATE_BLINK>
	STATE_SOUND = SOUND_WAIT;
 740:	82 e0       	ldi	r24, 0x02	; 2
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <STATE_SOUND+0x1>
	
    /* Replace with your application code */
    while (1) 
    {
		TICK_3LED();
 748:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <STATE_SOUND>
 74c:	8e dd       	rcall	.-1252   	; 0x26a <TICK_3LED>
 74e:	1b de       	rcall	.-970    	; 0x386 <TICK_BLINK>
 750:	26 df       	rcall	.-436    	; 0x59e <TICK_FRQ>
 752:	79 de       	rcall	.-782    	; 0x446 <TICK_SOUND>
 754:	bb df       	rcall	.-138    	; 0x6cc <TICK_COMBINE_LED>
 756:	00 00       	nop
 758:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 75c:	88 23       	and	r24, r24
 75e:	e1 f3       	breq	.-8      	; 0x758 <main+0x64>
 760:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 764:	f3 cf       	rjmp	.-26     	; 0x74c <main+0x58>

00000766 <_exit>:
 766:	f8 94       	cli

00000768 <__stop_program>:
 768:	ff cf       	rjmp	.-2      	; 0x768 <__stop_program>
