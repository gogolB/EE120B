
sbhat006_lab9_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000007a8  0000083c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800120  00800120  0000085c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d9  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000476  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000026fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a6 d1       	rcall	.+844    	; 0x410 <main>
  c4:	6f c3       	rjmp	.+1758   	; 0x7a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <set_PWM>:
 * Author : Gogol
 */ 

#include <avr/io.h>

void set_PWM(double frequency) {
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 d0       	rcall	.+0      	; 0xd2 <set_PWM+0xa>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <set_PWM+0xc>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	69 83       	std	Y+1, r22	; 0x01
  da:	7a 83       	std	Y+2, r23	; 0x02
  dc:	8b 83       	std	Y+3, r24	; 0x03
  de:	9c 83       	std	Y+4, r25	; 0x04
	static double current_frequency;
	if (frequency != current_frequency) {
  e0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <current_frequency.1604>
  e4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <current_frequency.1604+0x1>
  e8:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <current_frequency.1604+0x2>
  ec:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <current_frequency.1604+0x3>
  f0:	9c 01       	movw	r18, r24
  f2:	ad 01       	movw	r20, r26
  f4:	69 81       	ldd	r22, Y+1	; 0x01
  f6:	7a 81       	ldd	r23, Y+2	; 0x02
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	9c 81       	ldd	r25, Y+4	; 0x04
  fc:	da d1       	rcall	.+948    	; 0x4b2 <__cmpsf2>
  fe:	88 23       	and	r24, r24
 100:	09 f4       	brne	.+2      	; 0x104 <set_PWM+0x3c>
		else if (frequency > 31250) { OCR3A = 0x0000; }
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
		TCNT3 = 0;
		current_frequency = frequency;
	}
}
 102:	67 c0       	rjmp	.+206    	; 0x1d2 <set_PWM+0x10a>
#include <avr/io.h>

void set_PWM(double frequency) {
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; }
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	a9 01       	movw	r20, r18
 10a:	69 81       	ldd	r22, Y+1	; 0x01
 10c:	7a 81       	ldd	r23, Y+2	; 0x02
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	9c 81       	ldd	r25, Y+4	; 0x04
 112:	cf d1       	rcall	.+926    	; 0x4b2 <__cmpsf2>
 114:	88 23       	and	r24, r24
 116:	49 f4       	brne	.+18     	; 0x12a <set_PWM+0x62>
 118:	81 e9       	ldi	r24, 0x91	; 145
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	21 e9       	ldi	r18, 0x91	; 145
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	28 70       	andi	r18, 0x08	; 8
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 12a:	28 e5       	ldi	r18, 0x58	; 88
 12c:	39 e3       	ldi	r19, 0x39	; 57
 12e:	44 e7       	ldi	r20, 0x74	; 116
 130:	5f e3       	ldi	r21, 0x3F	; 63
 132:	69 81       	ldd	r22, Y+1	; 0x01
 134:	7a 81       	ldd	r23, Y+2	; 0x02
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	9c 81       	ldd	r25, Y+4	; 0x04
 13a:	bb d1       	rcall	.+886    	; 0x4b2 <__cmpsf2>
 13c:	88 23       	and	r24, r24
 13e:	44 f4       	brge	.+16     	; 0x150 <set_PWM+0x88>
 140:	88 e9       	ldi	r24, 0x98	; 152
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	3f ef       	ldi	r19, 0xFF	; 255
 148:	fc 01       	movw	r30, r24
 14a:	31 83       	std	Z+1, r19	; 0x01
 14c:	20 83       	st	Z, r18
 14e:	30 c0       	rjmp	.+96     	; 0x1b0 <set_PWM+0xe8>
		else if (frequency > 31250) { OCR3A = 0x0000; }
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	34 e2       	ldi	r19, 0x24	; 36
 154:	44 ef       	ldi	r20, 0xF4	; 244
 156:	56 e4       	ldi	r21, 0x46	; 70
 158:	69 81       	ldd	r22, Y+1	; 0x01
 15a:	7a 81       	ldd	r23, Y+2	; 0x02
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	9c 81       	ldd	r25, Y+4	; 0x04
 160:	ba d2       	rcall	.+1396   	; 0x6d6 <__gesf2>
 162:	18 16       	cp	r1, r24
 164:	34 f4       	brge	.+12     	; 0x172 <set_PWM+0xaa>
 166:	88 e9       	ldi	r24, 0x98	; 152
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	11 82       	std	Z+1, r1	; 0x01
 16e:	10 82       	st	Z, r1
 170:	1f c0       	rjmp	.+62     	; 0x1b0 <set_PWM+0xe8>
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 172:	08 e9       	ldi	r16, 0x98	; 152
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	53 e4       	ldi	r21, 0x43	; 67
 17e:	69 81       	ldd	r22, Y+1	; 0x01
 180:	7a 81       	ldd	r23, Y+2	; 0x02
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	9c 81       	ldd	r25, Y+4	; 0x04
 186:	ab d2       	rcall	.+1366   	; 0x6de <__mulsf3>
 188:	dc 01       	movw	r26, r24
 18a:	cb 01       	movw	r24, r22
 18c:	9c 01       	movw	r18, r24
 18e:	ad 01       	movw	r20, r26
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	74 e2       	ldi	r23, 0x24	; 36
 194:	84 ef       	ldi	r24, 0xF4	; 244
 196:	9a e4       	ldi	r25, 0x4A	; 74
 198:	90 d1       	rcall	.+800    	; 0x4ba <__divsf3>
 19a:	dc 01       	movw	r26, r24
 19c:	cb 01       	movw	r24, r22
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	f3 d1       	rcall	.+998    	; 0x58a <__fixsfsi>
 1a4:	dc 01       	movw	r26, r24
 1a6:	cb 01       	movw	r24, r22
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f8 01       	movw	r30, r16
 1ac:	91 83       	std	Z+1, r25	; 0x01
 1ae:	80 83       	st	Z, r24
		TCNT3 = 0;
 1b0:	84 e9       	ldi	r24, 0x94	; 148
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	11 82       	std	Z+1, r1	; 0x01
 1b8:	10 82       	st	Z, r1
		current_frequency = frequency;
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	ab 81       	ldd	r26, Y+3	; 0x03
 1c0:	bc 81       	ldd	r27, Y+4	; 0x04
 1c2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <current_frequency.1604>
 1c6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <current_frequency.1604+0x1>
 1ca:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <current_frequency.1604+0x2>
 1ce:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <current_frequency.1604+0x3>
	}
}
 1d2:	00 00       	nop
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <PWM_on>:

void PWM_on() {
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = (1 << COM3A0);
 1ee:	80 e9       	ldi	r24, 0x90	; 144
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	20 e4       	ldi	r18, 0x40	; 64
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 1f8:	81 e9       	ldi	r24, 0x91	; 145
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	2b e0       	ldi	r18, 0x0B	; 11
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
	set_PWM(0);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	cb 01       	movw	r24, r22
 208:	5f df       	rcall	.-322    	; 0xc8 <set_PWM>
}
 20a:	00 00       	nop
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <PWM_off>:

void PWM_off() {
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = 0x00;
 21a:	80 e9       	ldi	r24, 0x90	; 144
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	10 82       	st	Z, r1
	TCCR3B = 0x00;
 222:	81 e9       	ldi	r24, 0x91	; 145
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	10 82       	st	Z, r1
}
 22a:	00 00       	nop
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <SM_FRQ_CONTROL_TICK>:

enum SM_FRQ_CONTROL{WAIT_FOR_INPUT_RE, INC_FRQ, DEC_FRQ, WAIT_FOR_INPUT_FE}FRQ_CONTROL_STATE;
enum SM_FRQ_PLAY{PLAY_FRQ, DONT_PLAY_FRQ}FRW_PLAY_STATE;

void SM_FRQ_CONTROL_TICK()
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	switch(FRQ_CONTROL_STATE)
 23a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <FRQ_CONTROL_STATE>
 23e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	91 05       	cpc	r25, r1
 246:	69 f1       	breq	.+90     	; 0x2a2 <SM_FRQ_CONTROL_TICK+0x70>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	91 05       	cpc	r25, r1
 24c:	30 f0       	brcs	.+12     	; 0x25a <SM_FRQ_CONTROL_TICK+0x28>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	91 05       	cpc	r25, r1
 252:	71 f1       	breq	.+92     	; 0x2b0 <SM_FRQ_CONTROL_TICK+0x7e>
 254:	03 97       	sbiw	r24, 0x03	; 3
 256:	99 f1       	breq	.+102    	; 0x2be <SM_FRQ_CONTROL_TICK+0x8c>
 258:	46 c0       	rjmp	.+140    	; 0x2e6 <SM_FRQ_CONTROL_TICK+0xb4>
	{
		case WAIT_FOR_INPUT_RE:
			if(buttonFrqUp && !buttonFrqDn)
 25a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <buttonFrqUp>
 25e:	88 23       	and	r24, r24
 260:	59 f0       	breq	.+22     	; 0x278 <SM_FRQ_CONTROL_TICK+0x46>
 262:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <buttonFrqDn>
 266:	88 23       	and	r24, r24
 268:	39 f4       	brne	.+14     	; 0x278 <SM_FRQ_CONTROL_TICK+0x46>
			{
				FRQ_CONTROL_STATE = INC_FRQ;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 272:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <FRQ_CONTROL_STATE>
 276:	14 c0       	rjmp	.+40     	; 0x2a0 <SM_FRQ_CONTROL_TICK+0x6e>
			}
			else if(!buttonFrqUp && buttonFrqDn)
 278:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <buttonFrqUp>
 27c:	88 23       	and	r24, r24
 27e:	59 f4       	brne	.+22     	; 0x296 <SM_FRQ_CONTROL_TICK+0x64>
 280:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <buttonFrqDn>
 284:	88 23       	and	r24, r24
 286:	39 f0       	breq	.+14     	; 0x296 <SM_FRQ_CONTROL_TICK+0x64>
			{
				FRQ_CONTROL_STATE = DEC_FRQ;
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 290:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <FRQ_CONTROL_STATE>
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <SM_FRQ_CONTROL_TICK+0x6e>
			}
			else
			{
				FRQ_CONTROL_STATE = WAIT_FOR_INPUT_RE;
 296:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 29a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <FRQ_CONTROL_STATE>
			}
		break;
 29e:	27 c0       	rjmp	.+78     	; 0x2ee <SM_FRQ_CONTROL_TICK+0xbc>
 2a0:	26 c0       	rjmp	.+76     	; 0x2ee <SM_FRQ_CONTROL_TICK+0xbc>
		
		case INC_FRQ:
			FRQ_CONTROL_STATE = WAIT_FOR_INPUT_FE;
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 2aa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <FRQ_CONTROL_STATE>
		break;
 2ae:	1f c0       	rjmp	.+62     	; 0x2ee <SM_FRQ_CONTROL_TICK+0xbc>
		
		case DEC_FRQ:
			FRQ_CONTROL_STATE = WAIT_FOR_INPUT_FE;
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 2b8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <FRQ_CONTROL_STATE>
		break;
 2bc:	18 c0       	rjmp	.+48     	; 0x2ee <SM_FRQ_CONTROL_TICK+0xbc>
		
		case WAIT_FOR_INPUT_FE:
			if(buttonFrqUp || buttonFrqDn)
 2be:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <buttonFrqUp>
 2c2:	88 23       	and	r24, r24
 2c4:	21 f4       	brne	.+8      	; 0x2ce <SM_FRQ_CONTROL_TICK+0x9c>
 2c6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <buttonFrqDn>
 2ca:	88 23       	and	r24, r24
 2cc:	39 f0       	breq	.+14     	; 0x2dc <SM_FRQ_CONTROL_TICK+0xaa>
			{
				FRQ_CONTROL_STATE = WAIT_FOR_INPUT_FE;
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 2d6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <FRQ_CONTROL_STATE>
			}
			else
			{
				FRQ_CONTROL_STATE = WAIT_FOR_INPUT_RE;
			}
		break;
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <SM_FRQ_CONTROL_TICK+0xbc>
			{
				FRQ_CONTROL_STATE = WAIT_FOR_INPUT_FE;
			}
			else
			{
				FRQ_CONTROL_STATE = WAIT_FOR_INPUT_RE;
 2dc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 2e0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <FRQ_CONTROL_STATE>
			}
		break;
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <SM_FRQ_CONTROL_TICK+0xbc>
		
		default:
			FRQ_CONTROL_STATE = WAIT_FOR_INPUT_RE;
 2e6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 2ea:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <FRQ_CONTROL_STATE>
	}
	
	switch(FRQ_CONTROL_STATE)
 2ee:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <FRQ_CONTROL_STATE>
 2f2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	91 05       	cpc	r25, r1
 2fa:	19 f0       	breq	.+6      	; 0x302 <SM_FRQ_CONTROL_TICK+0xd0>
 2fc:	02 97       	sbiw	r24, 0x02	; 2
 2fe:	19 f1       	breq	.+70     	; 0x346 <SM_FRQ_CONTROL_TICK+0x114>
				currFrq--;
			set_PWM(FRQ[currFrq]);
		break;
		
	}
}	
 300:	45 c0       	rjmp	.+138    	; 0x38c <SM_FRQ_CONTROL_TICK+0x15a>
	}
	
	switch(FRQ_CONTROL_STATE)
	{
		case INC_FRQ:
			if(currFrq < 7)
 302:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currFrq>
 306:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <currFrq+0x1>
 30a:	07 97       	sbiw	r24, 0x07	; 7
 30c:	4c f4       	brge	.+18     	; 0x320 <SM_FRQ_CONTROL_TICK+0xee>
				currFrq++;
 30e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currFrq>
 312:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <currFrq+0x1>
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <currFrq+0x1>
 31c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <currFrq>
			set_PWM(FRQ[currFrq]);
 320:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currFrq>
 324:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <currFrq+0x1>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	80 50       	subi	r24, 0x00	; 0
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	fc 01       	movw	r30, r24
 336:	80 81       	ld	r24, Z
 338:	91 81       	ldd	r25, Z+1	; 0x01
 33a:	a2 81       	ldd	r26, Z+2	; 0x02
 33c:	b3 81       	ldd	r27, Z+3	; 0x03
 33e:	bc 01       	movw	r22, r24
 340:	cd 01       	movw	r24, r26
 342:	c2 de       	rcall	.-636    	; 0xc8 <set_PWM>
		break;
 344:	23 c0       	rjmp	.+70     	; 0x38c <SM_FRQ_CONTROL_TICK+0x15a>
		
		case DEC_FRQ:
			if(currFrq > 0)
 346:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currFrq>
 34a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <currFrq+0x1>
 34e:	18 16       	cp	r1, r24
 350:	19 06       	cpc	r1, r25
 352:	4c f4       	brge	.+18     	; 0x366 <SM_FRQ_CONTROL_TICK+0x134>
				currFrq--;
 354:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currFrq>
 358:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <currFrq+0x1>
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <currFrq+0x1>
 362:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <currFrq>
			set_PWM(FRQ[currFrq]);
 366:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currFrq>
 36a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <currFrq+0x1>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	80 50       	subi	r24, 0x00	; 0
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	fc 01       	movw	r30, r24
 37c:	80 81       	ld	r24, Z
 37e:	91 81       	ldd	r25, Z+1	; 0x01
 380:	a2 81       	ldd	r26, Z+2	; 0x02
 382:	b3 81       	ldd	r27, Z+3	; 0x03
 384:	bc 01       	movw	r22, r24
 386:	cd 01       	movw	r24, r26
 388:	9f de       	rcall	.-706    	; 0xc8 <set_PWM>
		break;
 38a:	00 00       	nop
		
	}
}	
 38c:	00 00       	nop
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <SM_FRQ_PLAY_TICK>:

void SM_FRQ_PLAY_TICK()
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
	switch(FRW_PLAY_STATE)
 39c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FRW_PLAY_STATE>
 3a0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <FRW_PLAY_STATE+0x1>
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	19 f0       	breq	.+6      	; 0x3ae <SM_FRQ_PLAY_TICK+0x1a>
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	89 f0       	breq	.+34     	; 0x3ce <SM_FRQ_PLAY_TICK+0x3a>
 3ac:	20 c0       	rjmp	.+64     	; 0x3ee <SM_FRQ_PLAY_TICK+0x5a>
	{
		case PLAY_FRQ:
			if(!buttonPlay)
 3ae:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <buttonPlay>
 3b2:	88 23       	and	r24, r24
 3b4:	39 f4       	brne	.+14     	; 0x3c4 <SM_FRQ_PLAY_TICK+0x30>
			{
				FRW_PLAY_STATE = DONT_PLAY_FRQ;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <FRW_PLAY_STATE+0x1>
 3be:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FRW_PLAY_STATE>
			}
			else
			{
				FRW_PLAY_STATE = PLAY_FRQ;
			}
		break;
 3c2:	15 c0       	rjmp	.+42     	; 0x3ee <SM_FRQ_PLAY_TICK+0x5a>
			{
				FRW_PLAY_STATE = DONT_PLAY_FRQ;
			}
			else
			{
				FRW_PLAY_STATE = PLAY_FRQ;
 3c4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <FRW_PLAY_STATE+0x1>
 3c8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <FRW_PLAY_STATE>
			}
		break;
 3cc:	10 c0       	rjmp	.+32     	; 0x3ee <SM_FRQ_PLAY_TICK+0x5a>
		
		case DONT_PLAY_FRQ:
			if(buttonPlay)
 3ce:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <buttonPlay>
 3d2:	88 23       	and	r24, r24
 3d4:	29 f0       	breq	.+10     	; 0x3e0 <SM_FRQ_PLAY_TICK+0x4c>
			{
				FRW_PLAY_STATE = PLAY_FRQ;
 3d6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <FRW_PLAY_STATE+0x1>
 3da:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <FRW_PLAY_STATE>
			}
			else
			{
				FRW_PLAY_STATE = DONT_PLAY_FRQ;
			}
		break;
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <SM_FRQ_PLAY_TICK+0x58>
			{
				FRW_PLAY_STATE = PLAY_FRQ;
			}
			else
			{
				FRW_PLAY_STATE = DONT_PLAY_FRQ;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <FRW_PLAY_STATE+0x1>
 3e8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FRW_PLAY_STATE>
			}
		break;
 3ec:	00 00       	nop
	}
	
	// ACTIONS
	switch(FRW_PLAY_STATE)
 3ee:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FRW_PLAY_STATE>
 3f2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <FRW_PLAY_STATE+0x1>
 3f6:	00 97       	sbiw	r24, 0x00	; 0
 3f8:	19 f0       	breq	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	19 f0       	breq	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		case PLAY_FRQ:
			PWM_on();
		break;
		
		case DONT_PLAY_FRQ:
			PWM_off();
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	f2 de       	rcall	.-540    	; 0x1e6 <PWM_on>
		break; 
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	}
}
 404:	06 df       	rcall	.-500    	; 0x212 <PWM_off>
 406:	00 00       	nop
 408:	00 00       	nop
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <main>:


int main(void)
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 418:	81 e2       	ldi	r24, 0x21	; 33
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	fc 01       	movw	r30, r24
 41e:	10 82       	st	Z, r1
 420:	82 e2       	ldi	r24, 0x22	; 34
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 42a:	84 e2       	ldi	r24, 0x24	; 36
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
 434:	85 e2       	ldi	r24, 0x25	; 37
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	10 82       	st	Z, r1
	
	FRQ_CONTROL_STATE = WAIT_FOR_INPUT_RE;
 43c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <FRQ_CONTROL_STATE+0x1>
 440:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <FRQ_CONTROL_STATE>
	FRW_PLAY_STATE = DONT_PLAY_FRQ;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <FRW_PLAY_STATE+0x1>
 44c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FRW_PLAY_STATE>
	PWM_on();
	
    /* Replace with your application code */
    while (1) 
    {
		tmpA = PINA & 0xFF;
 450:	ca de       	rcall	.-620    	; 0x1e6 <PWM_on>
 452:	80 e2       	ldi	r24, 0x20	; 32
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	fc 01       	movw	r30, r24
 458:	80 81       	ld	r24, Z
 45a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		buttonPlay = ((tmpA & 0x01) == 0x01);
 45e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 462:	88 2f       	mov	r24, r24
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	81 70       	andi	r24, 0x01	; 1
 468:	99 27       	eor	r25, r25
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	89 2b       	or	r24, r25
 46e:	09 f4       	brne	.+2      	; 0x472 <main+0x62>
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	82 2f       	mov	r24, r18
 474:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <buttonPlay>
		buttonFrqUp = ((tmpA & 0x02) == 0x02);
 478:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	82 70       	andi	r24, 0x02	; 2
 482:	99 27       	eor	r25, r25
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	89 2b       	or	r24, r25
 488:	09 f4       	brne	.+2      	; 0x48c <main+0x7c>
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	82 2f       	mov	r24, r18
 48e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <buttonFrqUp>
		buttonFrqDn = ((tmpA & 0x04) == 0x04);
 492:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 496:	88 2f       	mov	r24, r24
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	84 70       	andi	r24, 0x04	; 4
 49c:	99 27       	eor	r25, r25
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	89 2b       	or	r24, r25
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <main+0x96>
 4a4:	20 e0       	ldi	r18, 0x00	; 0
		SM_FRQ_CONTROL_TICK();
 4a6:	82 2f       	mov	r24, r18
		SM_FRQ_PLAY_TICK();
 4a8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <buttonFrqDn>
		
    }
 4ac:	c2 de       	rcall	.-636    	; 0x232 <SM_FRQ_CONTROL_TICK>
 4ae:	72 df       	rcall	.-284    	; 0x394 <SM_FRQ_PLAY_TICK>
 4b0:	d0 cf       	rjmp	.-96     	; 0x452 <main+0x42>

000004b2 <__cmpsf2>:
 4b2:	9c d0       	rcall	.+312    	; 0x5ec <__fp_cmp>
 4b4:	08 f4       	brcc	.+2      	; 0x4b8 <__cmpsf2+0x6>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	08 95       	ret

000004ba <__divsf3>:
 4ba:	0c d0       	rcall	.+24     	; 0x4d4 <__divsf3x>
 4bc:	d2 c0       	rjmp	.+420    	; 0x662 <__fp_round>
 4be:	ca d0       	rcall	.+404    	; 0x654 <__fp_pscB>
 4c0:	40 f0       	brcs	.+16     	; 0x4d2 <__divsf3+0x18>
 4c2:	c1 d0       	rcall	.+386    	; 0x646 <__fp_pscA>
 4c4:	30 f0       	brcs	.+12     	; 0x4d2 <__divsf3+0x18>
 4c6:	21 f4       	brne	.+8      	; 0x4d0 <__divsf3+0x16>
 4c8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ca:	19 f0       	breq	.+6      	; 0x4d2 <__divsf3+0x18>
 4cc:	b3 c0       	rjmp	.+358    	; 0x634 <__fp_inf>
 4ce:	51 11       	cpse	r21, r1
 4d0:	fc c0       	rjmp	.+504    	; 0x6ca <__fp_szero>
 4d2:	b6 c0       	rjmp	.+364    	; 0x640 <__fp_nan>

000004d4 <__divsf3x>:
 4d4:	d7 d0       	rcall	.+430    	; 0x684 <__fp_split3>
 4d6:	98 f3       	brcs	.-26     	; 0x4be <__divsf3+0x4>

000004d8 <__divsf3_pse>:
 4d8:	99 23       	and	r25, r25
 4da:	c9 f3       	breq	.-14     	; 0x4ce <__divsf3+0x14>
 4dc:	55 23       	and	r21, r21
 4de:	b1 f3       	breq	.-20     	; 0x4cc <__divsf3+0x12>
 4e0:	95 1b       	sub	r25, r21
 4e2:	55 0b       	sbc	r21, r21
 4e4:	bb 27       	eor	r27, r27
 4e6:	aa 27       	eor	r26, r26
 4e8:	62 17       	cp	r22, r18
 4ea:	73 07       	cpc	r23, r19
 4ec:	84 07       	cpc	r24, r20
 4ee:	38 f0       	brcs	.+14     	; 0x4fe <__divsf3_pse+0x26>
 4f0:	9f 5f       	subi	r25, 0xFF	; 255
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	22 0f       	add	r18, r18
 4f6:	33 1f       	adc	r19, r19
 4f8:	44 1f       	adc	r20, r20
 4fa:	aa 1f       	adc	r26, r26
 4fc:	a9 f3       	breq	.-22     	; 0x4e8 <__divsf3_pse+0x10>
 4fe:	33 d0       	rcall	.+102    	; 0x566 <__divsf3_pse+0x8e>
 500:	0e 2e       	mov	r0, r30
 502:	3a f0       	brmi	.+14     	; 0x512 <__divsf3_pse+0x3a>
 504:	e0 e8       	ldi	r30, 0x80	; 128
 506:	30 d0       	rcall	.+96     	; 0x568 <__divsf3_pse+0x90>
 508:	91 50       	subi	r25, 0x01	; 1
 50a:	50 40       	sbci	r21, 0x00	; 0
 50c:	e6 95       	lsr	r30
 50e:	00 1c       	adc	r0, r0
 510:	ca f7       	brpl	.-14     	; 0x504 <__divsf3_pse+0x2c>
 512:	29 d0       	rcall	.+82     	; 0x566 <__divsf3_pse+0x8e>
 514:	fe 2f       	mov	r31, r30
 516:	27 d0       	rcall	.+78     	; 0x566 <__divsf3_pse+0x8e>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	88 1f       	adc	r24, r24
 51e:	bb 1f       	adc	r27, r27
 520:	26 17       	cp	r18, r22
 522:	37 07       	cpc	r19, r23
 524:	48 07       	cpc	r20, r24
 526:	ab 07       	cpc	r26, r27
 528:	b0 e8       	ldi	r27, 0x80	; 128
 52a:	09 f0       	breq	.+2      	; 0x52e <__divsf3_pse+0x56>
 52c:	bb 0b       	sbc	r27, r27
 52e:	80 2d       	mov	r24, r0
 530:	bf 01       	movw	r22, r30
 532:	ff 27       	eor	r31, r31
 534:	93 58       	subi	r25, 0x83	; 131
 536:	5f 4f       	sbci	r21, 0xFF	; 255
 538:	2a f0       	brmi	.+10     	; 0x544 <__divsf3_pse+0x6c>
 53a:	9e 3f       	cpi	r25, 0xFE	; 254
 53c:	51 05       	cpc	r21, r1
 53e:	68 f0       	brcs	.+26     	; 0x55a <__divsf3_pse+0x82>
 540:	79 c0       	rjmp	.+242    	; 0x634 <__fp_inf>
 542:	c3 c0       	rjmp	.+390    	; 0x6ca <__fp_szero>
 544:	5f 3f       	cpi	r21, 0xFF	; 255
 546:	ec f3       	brlt	.-6      	; 0x542 <__divsf3_pse+0x6a>
 548:	98 3e       	cpi	r25, 0xE8	; 232
 54a:	dc f3       	brlt	.-10     	; 0x542 <__divsf3_pse+0x6a>
 54c:	86 95       	lsr	r24
 54e:	77 95       	ror	r23
 550:	67 95       	ror	r22
 552:	b7 95       	ror	r27
 554:	f7 95       	ror	r31
 556:	9f 5f       	subi	r25, 0xFF	; 255
 558:	c9 f7       	brne	.-14     	; 0x54c <__divsf3_pse+0x74>
 55a:	88 0f       	add	r24, r24
 55c:	91 1d       	adc	r25, r1
 55e:	96 95       	lsr	r25
 560:	87 95       	ror	r24
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret
 566:	e1 e0       	ldi	r30, 0x01	; 1
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	bb 1f       	adc	r27, r27
 570:	62 17       	cp	r22, r18
 572:	73 07       	cpc	r23, r19
 574:	84 07       	cpc	r24, r20
 576:	ba 07       	cpc	r27, r26
 578:	20 f0       	brcs	.+8      	; 0x582 <__divsf3_pse+0xaa>
 57a:	62 1b       	sub	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	ba 0b       	sbc	r27, r26
 582:	ee 1f       	adc	r30, r30
 584:	88 f7       	brcc	.-30     	; 0x568 <__divsf3_pse+0x90>
 586:	e0 95       	com	r30
 588:	08 95       	ret

0000058a <__fixsfsi>:
 58a:	04 d0       	rcall	.+8      	; 0x594 <__fixunssfsi>
 58c:	68 94       	set
 58e:	b1 11       	cpse	r27, r1
 590:	9c c0       	rjmp	.+312    	; 0x6ca <__fp_szero>
 592:	08 95       	ret

00000594 <__fixunssfsi>:
 594:	7f d0       	rcall	.+254    	; 0x694 <__fp_splitA>
 596:	88 f0       	brcs	.+34     	; 0x5ba <__fixunssfsi+0x26>
 598:	9f 57       	subi	r25, 0x7F	; 127
 59a:	90 f0       	brcs	.+36     	; 0x5c0 <__fixunssfsi+0x2c>
 59c:	b9 2f       	mov	r27, r25
 59e:	99 27       	eor	r25, r25
 5a0:	b7 51       	subi	r27, 0x17	; 23
 5a2:	a0 f0       	brcs	.+40     	; 0x5cc <__fixunssfsi+0x38>
 5a4:	d1 f0       	breq	.+52     	; 0x5da <__fixunssfsi+0x46>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	1a f0       	brmi	.+6      	; 0x5b6 <__fixunssfsi+0x22>
 5b0:	ba 95       	dec	r27
 5b2:	c9 f7       	brne	.-14     	; 0x5a6 <__fixunssfsi+0x12>
 5b4:	12 c0       	rjmp	.+36     	; 0x5da <__fixunssfsi+0x46>
 5b6:	b1 30       	cpi	r27, 0x01	; 1
 5b8:	81 f0       	breq	.+32     	; 0x5da <__fixunssfsi+0x46>
 5ba:	86 d0       	rcall	.+268    	; 0x6c8 <__fp_zero>
 5bc:	b1 e0       	ldi	r27, 0x01	; 1
 5be:	08 95       	ret
 5c0:	83 c0       	rjmp	.+262    	; 0x6c8 <__fp_zero>
 5c2:	67 2f       	mov	r22, r23
 5c4:	78 2f       	mov	r23, r24
 5c6:	88 27       	eor	r24, r24
 5c8:	b8 5f       	subi	r27, 0xF8	; 248
 5ca:	39 f0       	breq	.+14     	; 0x5da <__fixunssfsi+0x46>
 5cc:	b9 3f       	cpi	r27, 0xF9	; 249
 5ce:	cc f3       	brlt	.-14     	; 0x5c2 <__fixunssfsi+0x2e>
 5d0:	86 95       	lsr	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b3 95       	inc	r27
 5d8:	d9 f7       	brne	.-10     	; 0x5d0 <__fixunssfsi+0x3c>
 5da:	3e f4       	brtc	.+14     	; 0x5ea <__fixunssfsi+0x56>
 5dc:	90 95       	com	r25
 5de:	80 95       	com	r24
 5e0:	70 95       	com	r23
 5e2:	61 95       	neg	r22
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	8f 4f       	sbci	r24, 0xFF	; 255
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	08 95       	ret

000005ec <__fp_cmp>:
 5ec:	99 0f       	add	r25, r25
 5ee:	00 08       	sbc	r0, r0
 5f0:	55 0f       	add	r21, r21
 5f2:	aa 0b       	sbc	r26, r26
 5f4:	e0 e8       	ldi	r30, 0x80	; 128
 5f6:	fe ef       	ldi	r31, 0xFE	; 254
 5f8:	16 16       	cp	r1, r22
 5fa:	17 06       	cpc	r1, r23
 5fc:	e8 07       	cpc	r30, r24
 5fe:	f9 07       	cpc	r31, r25
 600:	c0 f0       	brcs	.+48     	; 0x632 <__fp_cmp+0x46>
 602:	12 16       	cp	r1, r18
 604:	13 06       	cpc	r1, r19
 606:	e4 07       	cpc	r30, r20
 608:	f5 07       	cpc	r31, r21
 60a:	98 f0       	brcs	.+38     	; 0x632 <__fp_cmp+0x46>
 60c:	62 1b       	sub	r22, r18
 60e:	73 0b       	sbc	r23, r19
 610:	84 0b       	sbc	r24, r20
 612:	95 0b       	sbc	r25, r21
 614:	39 f4       	brne	.+14     	; 0x624 <__fp_cmp+0x38>
 616:	0a 26       	eor	r0, r26
 618:	61 f0       	breq	.+24     	; 0x632 <__fp_cmp+0x46>
 61a:	23 2b       	or	r18, r19
 61c:	24 2b       	or	r18, r20
 61e:	25 2b       	or	r18, r21
 620:	21 f4       	brne	.+8      	; 0x62a <__fp_cmp+0x3e>
 622:	08 95       	ret
 624:	0a 26       	eor	r0, r26
 626:	09 f4       	brne	.+2      	; 0x62a <__fp_cmp+0x3e>
 628:	a1 40       	sbci	r26, 0x01	; 1
 62a:	a6 95       	lsr	r26
 62c:	8f ef       	ldi	r24, 0xFF	; 255
 62e:	81 1d       	adc	r24, r1
 630:	81 1d       	adc	r24, r1
 632:	08 95       	ret

00000634 <__fp_inf>:
 634:	97 f9       	bld	r25, 7
 636:	9f 67       	ori	r25, 0x7F	; 127
 638:	80 e8       	ldi	r24, 0x80	; 128
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	08 95       	ret

00000640 <__fp_nan>:
 640:	9f ef       	ldi	r25, 0xFF	; 255
 642:	80 ec       	ldi	r24, 0xC0	; 192
 644:	08 95       	ret

00000646 <__fp_pscA>:
 646:	00 24       	eor	r0, r0
 648:	0a 94       	dec	r0
 64a:	16 16       	cp	r1, r22
 64c:	17 06       	cpc	r1, r23
 64e:	18 06       	cpc	r1, r24
 650:	09 06       	cpc	r0, r25
 652:	08 95       	ret

00000654 <__fp_pscB>:
 654:	00 24       	eor	r0, r0
 656:	0a 94       	dec	r0
 658:	12 16       	cp	r1, r18
 65a:	13 06       	cpc	r1, r19
 65c:	14 06       	cpc	r1, r20
 65e:	05 06       	cpc	r0, r21
 660:	08 95       	ret

00000662 <__fp_round>:
 662:	09 2e       	mov	r0, r25
 664:	03 94       	inc	r0
 666:	00 0c       	add	r0, r0
 668:	11 f4       	brne	.+4      	; 0x66e <__fp_round+0xc>
 66a:	88 23       	and	r24, r24
 66c:	52 f0       	brmi	.+20     	; 0x682 <__fp_round+0x20>
 66e:	bb 0f       	add	r27, r27
 670:	40 f4       	brcc	.+16     	; 0x682 <__fp_round+0x20>
 672:	bf 2b       	or	r27, r31
 674:	11 f4       	brne	.+4      	; 0x67a <__fp_round+0x18>
 676:	60 ff       	sbrs	r22, 0
 678:	04 c0       	rjmp	.+8      	; 0x682 <__fp_round+0x20>
 67a:	6f 5f       	subi	r22, 0xFF	; 255
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	08 95       	ret

00000684 <__fp_split3>:
 684:	57 fd       	sbrc	r21, 7
 686:	90 58       	subi	r25, 0x80	; 128
 688:	44 0f       	add	r20, r20
 68a:	55 1f       	adc	r21, r21
 68c:	59 f0       	breq	.+22     	; 0x6a4 <__fp_splitA+0x10>
 68e:	5f 3f       	cpi	r21, 0xFF	; 255
 690:	71 f0       	breq	.+28     	; 0x6ae <__fp_splitA+0x1a>
 692:	47 95       	ror	r20

00000694 <__fp_splitA>:
 694:	88 0f       	add	r24, r24
 696:	97 fb       	bst	r25, 7
 698:	99 1f       	adc	r25, r25
 69a:	61 f0       	breq	.+24     	; 0x6b4 <__fp_splitA+0x20>
 69c:	9f 3f       	cpi	r25, 0xFF	; 255
 69e:	79 f0       	breq	.+30     	; 0x6be <__fp_splitA+0x2a>
 6a0:	87 95       	ror	r24
 6a2:	08 95       	ret
 6a4:	12 16       	cp	r1, r18
 6a6:	13 06       	cpc	r1, r19
 6a8:	14 06       	cpc	r1, r20
 6aa:	55 1f       	adc	r21, r21
 6ac:	f2 cf       	rjmp	.-28     	; 0x692 <__fp_split3+0xe>
 6ae:	46 95       	lsr	r20
 6b0:	f1 df       	rcall	.-30     	; 0x694 <__fp_splitA>
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <__fp_splitA+0x30>
 6b4:	16 16       	cp	r1, r22
 6b6:	17 06       	cpc	r1, r23
 6b8:	18 06       	cpc	r1, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	f1 cf       	rjmp	.-30     	; 0x6a0 <__fp_splitA+0xc>
 6be:	86 95       	lsr	r24
 6c0:	71 05       	cpc	r23, r1
 6c2:	61 05       	cpc	r22, r1
 6c4:	08 94       	sec
 6c6:	08 95       	ret

000006c8 <__fp_zero>:
 6c8:	e8 94       	clt

000006ca <__fp_szero>:
 6ca:	bb 27       	eor	r27, r27
 6cc:	66 27       	eor	r22, r22
 6ce:	77 27       	eor	r23, r23
 6d0:	cb 01       	movw	r24, r22
 6d2:	97 f9       	bld	r25, 7
 6d4:	08 95       	ret

000006d6 <__gesf2>:
 6d6:	8a df       	rcall	.-236    	; 0x5ec <__fp_cmp>
 6d8:	08 f4       	brcc	.+2      	; 0x6dc <__gesf2+0x6>
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	08 95       	ret

000006de <__mulsf3>:
 6de:	0b d0       	rcall	.+22     	; 0x6f6 <__mulsf3x>
 6e0:	c0 cf       	rjmp	.-128    	; 0x662 <__fp_round>
 6e2:	b1 df       	rcall	.-158    	; 0x646 <__fp_pscA>
 6e4:	28 f0       	brcs	.+10     	; 0x6f0 <__mulsf3+0x12>
 6e6:	b6 df       	rcall	.-148    	; 0x654 <__fp_pscB>
 6e8:	18 f0       	brcs	.+6      	; 0x6f0 <__mulsf3+0x12>
 6ea:	95 23       	and	r25, r21
 6ec:	09 f0       	breq	.+2      	; 0x6f0 <__mulsf3+0x12>
 6ee:	a2 cf       	rjmp	.-188    	; 0x634 <__fp_inf>
 6f0:	a7 cf       	rjmp	.-178    	; 0x640 <__fp_nan>
 6f2:	11 24       	eor	r1, r1
 6f4:	ea cf       	rjmp	.-44     	; 0x6ca <__fp_szero>

000006f6 <__mulsf3x>:
 6f6:	c6 df       	rcall	.-116    	; 0x684 <__fp_split3>
 6f8:	a0 f3       	brcs	.-24     	; 0x6e2 <__mulsf3+0x4>

000006fa <__mulsf3_pse>:
 6fa:	95 9f       	mul	r25, r21
 6fc:	d1 f3       	breq	.-12     	; 0x6f2 <__mulsf3+0x14>
 6fe:	95 0f       	add	r25, r21
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	55 1f       	adc	r21, r21
 704:	62 9f       	mul	r22, r18
 706:	f0 01       	movw	r30, r0
 708:	72 9f       	mul	r23, r18
 70a:	bb 27       	eor	r27, r27
 70c:	f0 0d       	add	r31, r0
 70e:	b1 1d       	adc	r27, r1
 710:	63 9f       	mul	r22, r19
 712:	aa 27       	eor	r26, r26
 714:	f0 0d       	add	r31, r0
 716:	b1 1d       	adc	r27, r1
 718:	aa 1f       	adc	r26, r26
 71a:	64 9f       	mul	r22, r20
 71c:	66 27       	eor	r22, r22
 71e:	b0 0d       	add	r27, r0
 720:	a1 1d       	adc	r26, r1
 722:	66 1f       	adc	r22, r22
 724:	82 9f       	mul	r24, r18
 726:	22 27       	eor	r18, r18
 728:	b0 0d       	add	r27, r0
 72a:	a1 1d       	adc	r26, r1
 72c:	62 1f       	adc	r22, r18
 72e:	73 9f       	mul	r23, r19
 730:	b0 0d       	add	r27, r0
 732:	a1 1d       	adc	r26, r1
 734:	62 1f       	adc	r22, r18
 736:	83 9f       	mul	r24, r19
 738:	a0 0d       	add	r26, r0
 73a:	61 1d       	adc	r22, r1
 73c:	22 1f       	adc	r18, r18
 73e:	74 9f       	mul	r23, r20
 740:	33 27       	eor	r19, r19
 742:	a0 0d       	add	r26, r0
 744:	61 1d       	adc	r22, r1
 746:	23 1f       	adc	r18, r19
 748:	84 9f       	mul	r24, r20
 74a:	60 0d       	add	r22, r0
 74c:	21 1d       	adc	r18, r1
 74e:	82 2f       	mov	r24, r18
 750:	76 2f       	mov	r23, r22
 752:	6a 2f       	mov	r22, r26
 754:	11 24       	eor	r1, r1
 756:	9f 57       	subi	r25, 0x7F	; 127
 758:	50 40       	sbci	r21, 0x00	; 0
 75a:	8a f0       	brmi	.+34     	; 0x77e <__mulsf3_pse+0x84>
 75c:	e1 f0       	breq	.+56     	; 0x796 <__mulsf3_pse+0x9c>
 75e:	88 23       	and	r24, r24
 760:	4a f0       	brmi	.+18     	; 0x774 <__mulsf3_pse+0x7a>
 762:	ee 0f       	add	r30, r30
 764:	ff 1f       	adc	r31, r31
 766:	bb 1f       	adc	r27, r27
 768:	66 1f       	adc	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	91 50       	subi	r25, 0x01	; 1
 770:	50 40       	sbci	r21, 0x00	; 0
 772:	a9 f7       	brne	.-22     	; 0x75e <__mulsf3_pse+0x64>
 774:	9e 3f       	cpi	r25, 0xFE	; 254
 776:	51 05       	cpc	r21, r1
 778:	70 f0       	brcs	.+28     	; 0x796 <__mulsf3_pse+0x9c>
 77a:	5c cf       	rjmp	.-328    	; 0x634 <__fp_inf>
 77c:	a6 cf       	rjmp	.-180    	; 0x6ca <__fp_szero>
 77e:	5f 3f       	cpi	r21, 0xFF	; 255
 780:	ec f3       	brlt	.-6      	; 0x77c <__mulsf3_pse+0x82>
 782:	98 3e       	cpi	r25, 0xE8	; 232
 784:	dc f3       	brlt	.-10     	; 0x77c <__mulsf3_pse+0x82>
 786:	86 95       	lsr	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b7 95       	ror	r27
 78e:	f7 95       	ror	r31
 790:	e7 95       	ror	r30
 792:	9f 5f       	subi	r25, 0xFF	; 255
 794:	c1 f7       	brne	.-16     	; 0x786 <__mulsf3_pse+0x8c>
 796:	fe 2b       	or	r31, r30
 798:	88 0f       	add	r24, r24
 79a:	91 1d       	adc	r25, r1
 79c:	96 95       	lsr	r25
 79e:	87 95       	ror	r24
 7a0:	97 f9       	bld	r25, 7
 7a2:	08 95       	ret

000007a4 <_exit>:
 7a4:	f8 94       	cli

000007a6 <__stop_program>:
 7a6:	ff cf       	rjmp	.-2      	; 0x7a6 <__stop_program>
