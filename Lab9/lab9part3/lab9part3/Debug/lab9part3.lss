
lab9part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002b8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5b  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  00000f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e4  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056d  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031f  00000000  00000000  00002421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ab d0       	rcall	.+342    	; 0x21a <main>
  c4:	f7 c0       	rjmp	.+494    	; 0x2b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
			return 1000;
			
		default:
			return 0;
	}
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2b e0       	ldi	r18, 0x0B	; 11
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2d e7       	ldi	r18, 0x7D	; 125
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	31 83       	std	Z+1, r19	; 0x01
  e6:	20 83       	st	Z, r18
  e8:	8f e6       	ldi	r24, 0x6F	; 111
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 104:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 108:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 10c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 110:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 114:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 118:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 11c:	8f e5       	ldi	r24, 0x5F	; 95
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2f e5       	ldi	r18, 0x5F	; 95
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	20 68       	ori	r18, 0x80	; 128
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	00 00       	nop
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <TimerSet>:
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <TimerSet+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <TimerSet+0x8>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	69 83       	std	Y+1, r22	; 0x01
 144:	7a 83       	std	Y+2, r23	; 0x02
 146:	8b 83       	std	Y+3, r24	; 0x03
 148:	9c 83       	std	Y+4, r25	; 0x04
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	ab 81       	ldd	r26, Y+3	; 0x03
 150:	bc 81       	ldd	r27, Y+4	; 0x04
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 156:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 15a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 15e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 166:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 16a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 16e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 172:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 176:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 17a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 17e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 182:	00 00       	nop
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <STATE_TICK>:
enum SM_STATE{WAIT_FOR_BUTTON, WAIT_FOR_BUTTON_FE, PLAYING_SONG}STATE;
enum SM_STATE_SONG{WAIT_FOR_START, START,PLAY_NOTE, NEXT_NOTE}SONG_STATE;
unsigned char songEnded = 0;

void STATE_TICK()
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	// transition
	switch(STATE)
 19a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 19e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <STATE+0x1>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	11 f1       	breq	.+68     	; 0x1ec <STATE_TICK+0x5a>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	91 05       	cpc	r25, r1
 1ac:	18 f0       	brcs	.+6      	; 0x1b4 <STATE_TICK+0x22>
 1ae:	02 97       	sbiw	r24, 0x02	; 2
 1b0:	91 f0       	breq	.+36     	; 0x1d6 <STATE_TICK+0x44>
 1b2:	25 c0       	rjmp	.+74     	; 0x1fe <STATE_TICK+0x6c>
	{
		case WAIT_FOR_BUTTON:
			if(playButton)
 1b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1b8:	88 23       	and	r24, r24
 1ba:	31 f1       	breq	.+76     	; 0x208 <STATE_TICK+0x76>
			{
				STATE = PLAYING_SONG;
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <STATE+0x1>
 1c4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
				SONG_STATE = START;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <SONG_STATE+0x1>
 1d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <SONG_STATE>
			}
		break;
 1d4:	19 c0       	rjmp	.+50     	; 0x208 <STATE_TICK+0x76>
		
		case PLAYING_SONG:
			if(songEnded)
 1d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <songEnded>
 1da:	88 23       	and	r24, r24
 1dc:	b9 f0       	breq	.+46     	; 0x20c <STATE_TICK+0x7a>
			{
				STATE = WAIT_FOR_BUTTON_FE;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <STATE+0x1>
 1e6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
			}
		break;
 1ea:	10 c0       	rjmp	.+32     	; 0x20c <STATE_TICK+0x7a>
		
		case WAIT_FOR_BUTTON_FE:
			if(!playButton)
 1ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f0:	88 23       	and	r24, r24
 1f2:	71 f4       	brne	.+28     	; 0x210 <STATE_TICK+0x7e>
			{
				STATE = WAIT_FOR_BUTTON;
 1f4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <STATE+0x1>
 1f8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <STATE>
			}
		break;
 1fc:	09 c0       	rjmp	.+18     	; 0x210 <STATE_TICK+0x7e>
		
		default:
			STATE = WAIT_FOR_BUTTON;
 1fe:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <STATE+0x1>
 202:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <STATE>
	}
}
 206:	05 c0       	rjmp	.+10     	; 0x212 <STATE_TICK+0x80>
			if(playButton)
			{
				STATE = PLAYING_SONG;
				SONG_STATE = START;
			}
		break;
 208:	00 00       	nop
 20a:	03 c0       	rjmp	.+6      	; 0x212 <STATE_TICK+0x80>
		case PLAYING_SONG:
			if(songEnded)
			{
				STATE = WAIT_FOR_BUTTON_FE;
			}
		break;
 20c:	00 00       	nop
 20e:	01 c0       	rjmp	.+2      	; 0x212 <STATE_TICK+0x80>
		case WAIT_FOR_BUTTON_FE:
			if(!playButton)
			{
				STATE = WAIT_FOR_BUTTON;
			}
		break;
 210:	00 00       	nop
		
		default:
			STATE = WAIT_FOR_BUTTON;
	}
}
 212:	00 00       	nop
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:

int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 222:	81 e2       	ldi	r24, 0x21	; 33
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	10 82       	st	Z, r1
 22a:	82 e2       	ldi	r24, 0x22	; 34
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 234:	84 e2       	ldi	r24, 0x24	; 36
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
 23e:	85 e2       	ldi	r24, 0x25	; 37
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 246:	87 e2       	ldi	r24, 0x27	; 39
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
 250:	88 e2       	ldi	r24, 0x28	; 40
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	10 82       	st	Z, r1
	
	STATE = WAIT_FOR_BUTTON;
 258:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <STATE+0x1>
 25c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <STATE>
	SONG_STATE = WAIT_FOR_START;
 260:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <SONG_STATE+0x1>
 264:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <SONG_STATE>
	
	TimerSet(1);
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 270:	62 df       	rcall	.-316    	; 0x136 <TimerSet>
 272:	2a df       	rcall	.-428    	; 0xc8 <TimerOn>
	
    /* Replace with your application code */
    while (1) 
    {
		playButton = ((PINA & 0x01) == 0x01);
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	80 81       	ld	r24, Z
 27c:	88 2f       	mov	r24, r24
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	81 70       	andi	r24, 0x01	; 1
 282:	99 27       	eor	r25, r25
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	89 2b       	or	r24, r25
 288:	09 f4       	brne	.+2      	; 0x28c <main+0x72>
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	82 2f       	mov	r24, r18
 28e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		STATE_TICK();
 292:	7f df       	rcall	.-258    	; 0x192 <STATE_TICK>
		//SM_SONG_TICK();
		PORTC = STATE;
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <STATE>
 29c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <STATE+0x1>
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
		while(!TimerFlag);
 2a4:	00 00       	nop
 2a6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TimerFlag>
 2aa:	88 23       	and	r24, r24
 2ac:	e1 f3       	breq	.-8      	; 0x2a6 <main+0x8c>
		TimerFlag=0;
 2ae:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <TimerFlag>
    }
 2b2:	e0 cf       	rjmp	.-64     	; 0x274 <main+0x5a>

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
