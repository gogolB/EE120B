
sbhat006_lab9_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000986  00000a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800140  00800140  00000a5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b91  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  000016dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c7  00000000  00000000  00001f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058b  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035a  00000000  00000000  00002c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	a9 01       	movw	r20, r18
  8e:	ae 01       	movw	r20, r28
  90:	b3 01       	movw	r22, r6
  92:	b8 01       	movw	r22, r16
  94:	bd 01       	movw	r22, r26
  96:	c2 01       	movw	r24, r4
  98:	c7 01       	movw	r24, r14
  9a:	cc 01       	movw	r24, r24

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e6 e8       	ldi	r30, 0x86	; 134
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a0 e4       	ldi	r26, 0x40	; 64
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a8 35       	cpi	r26, 0x58	; 88
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	98 d2       	rcall	.+1328   	; 0x604 <main>
  d4:	56 c4       	rjmp	.+2220   	; 0x982 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <TimerOn>:
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	81 e8       	ldi	r24, 0x81	; 129
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2b e0       	ldi	r18, 0x0B	; 11
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
  ea:	88 e8       	ldi	r24, 0x88	; 136
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2d e7       	ldi	r18, 0x7D	; 125
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	fc 01       	movw	r30, r24
  f4:	31 83       	std	Z+1, r19	; 0x01
  f6:	20 83       	st	Z, r18
  f8:	8f e6       	ldi	r24, 0x6F	; 111
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	22 e0       	ldi	r18, 0x02	; 2
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	84 e8       	ldi	r24, 0x84	; 132
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	11 82       	std	Z+1, r1	; 0x01
 10a:	10 82       	st	Z, r1
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 114:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 118:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_avr_timer_cntcurr>
 120:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <_avr_timer_cntcurr+0x1>
 124:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <_avr_timer_cntcurr+0x2>
 128:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <_avr_timer_cntcurr+0x3>
 12c:	8f e5       	ldi	r24, 0x5F	; 95
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2f e5       	ldi	r18, 0x5F	; 95
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	20 68       	ori	r18, 0x80	; 128
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	00 00       	nop
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	00 d0       	rcall	.+0      	; 0x14c <TimerSet+0x6>
 14c:	00 d0       	rcall	.+0      	; 0x14e <TimerSet+0x8>
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	69 83       	std	Y+1, r22	; 0x01
 154:	7a 83       	std	Y+2, r23	; 0x02
 156:	8b 83       	std	Y+3, r24	; 0x03
 158:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	ab 81       	ldd	r26, Y+3	; 0x03
 160:	bc 81       	ldd	r27, Y+4	; 0x04
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 166:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 16a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 16e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 176:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 17a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 17e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 182:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_avr_timer_cntcurr>
 186:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <_avr_timer_cntcurr+0x1>
 18a:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <_avr_timer_cntcurr+0x2>
 18e:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <_avr_timer_cntcurr+0x3>
}
 192:	00 00       	nop
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <set_PWM>:

// *****************************************************************************************
//										PWM functions
// *****************************************************************************************

void set_PWM(double frequency) {
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <set_PWM+0xa>
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <set_PWM+0xc>
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	69 83       	std	Y+1, r22	; 0x01
 1b4:	7a 83       	std	Y+2, r23	; 0x02
 1b6:	8b 83       	std	Y+3, r24	; 0x03
 1b8:	9c 83       	std	Y+4, r25	; 0x04
	static double current_frequency;
	if (frequency != current_frequency) {
 1ba:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <current_frequency.1620>
 1be:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <current_frequency.1620+0x1>
 1c2:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <current_frequency.1620+0x2>
 1c6:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <current_frequency.1620+0x3>
 1ca:	9c 01       	movw	r18, r24
 1cc:	ad 01       	movw	r20, r26
 1ce:	69 81       	ldd	r22, Y+1	; 0x01
 1d0:	7a 81       	ldd	r23, Y+2	; 0x02
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	9c 81       	ldd	r25, Y+4	; 0x04
 1d6:	53 d2       	rcall	.+1190   	; 0x67e <__cmpsf2>
 1d8:	88 23       	and	r24, r24
 1da:	09 f4       	brne	.+2      	; 0x1de <set_PWM+0x3c>
		else if (frequency > 31250) { OCR3A = 0x0000; }
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
		TCNT3 = 0;
		current_frequency = frequency;
	}
}
 1dc:	71 c0       	rjmp	.+226    	; 0x2c0 <set_PWM+0x11e>
// *****************************************************************************************

void set_PWM(double frequency) {
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; }
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	a9 01       	movw	r20, r18
 1e4:	69 81       	ldd	r22, Y+1	; 0x01
 1e6:	7a 81       	ldd	r23, Y+2	; 0x02
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	48 d2       	rcall	.+1168   	; 0x67e <__cmpsf2>
 1ee:	88 23       	and	r24, r24
 1f0:	51 f4       	brne	.+20     	; 0x206 <set_PWM+0x64>
 1f2:	81 e9       	ldi	r24, 0x91	; 145
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	21 e9       	ldi	r18, 0x91	; 145
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	28 70       	andi	r18, 0x08	; 8
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	09 c0       	rjmp	.+18     	; 0x218 <set_PWM+0x76>
		else { TCCR3B |= 0x03; }
 206:	81 e9       	ldi	r24, 0x91	; 145
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	21 e9       	ldi	r18, 0x91	; 145
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	20 81       	ld	r18, Z
 212:	23 60       	ori	r18, 0x03	; 3
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 218:	28 e5       	ldi	r18, 0x58	; 88
 21a:	39 e3       	ldi	r19, 0x39	; 57
 21c:	44 e7       	ldi	r20, 0x74	; 116
 21e:	5f e3       	ldi	r21, 0x3F	; 63
 220:	69 81       	ldd	r22, Y+1	; 0x01
 222:	7a 81       	ldd	r23, Y+2	; 0x02
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	9c 81       	ldd	r25, Y+4	; 0x04
 228:	2a d2       	rcall	.+1108   	; 0x67e <__cmpsf2>
 22a:	88 23       	and	r24, r24
 22c:	44 f4       	brge	.+16     	; 0x23e <set_PWM+0x9c>
 22e:	88 e9       	ldi	r24, 0x98	; 152
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	3f ef       	ldi	r19, 0xFF	; 255
 236:	fc 01       	movw	r30, r24
 238:	31 83       	std	Z+1, r19	; 0x01
 23a:	20 83       	st	Z, r18
 23c:	30 c0       	rjmp	.+96     	; 0x29e <set_PWM+0xfc>
		else if (frequency > 31250) { OCR3A = 0x0000; }
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	34 e2       	ldi	r19, 0x24	; 36
 242:	44 ef       	ldi	r20, 0xF4	; 244
 244:	56 e4       	ldi	r21, 0x46	; 70
 246:	69 81       	ldd	r22, Y+1	; 0x01
 248:	7a 81       	ldd	r23, Y+2	; 0x02
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	9c 81       	ldd	r25, Y+4	; 0x04
 24e:	29 d3       	rcall	.+1618   	; 0x8a2 <__gesf2>
 250:	18 16       	cp	r1, r24
 252:	34 f4       	brge	.+12     	; 0x260 <set_PWM+0xbe>
 254:	88 e9       	ldi	r24, 0x98	; 152
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	11 82       	std	Z+1, r1	; 0x01
 25c:	10 82       	st	Z, r1
 25e:	1f c0       	rjmp	.+62     	; 0x29e <set_PWM+0xfc>
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 260:	08 e9       	ldi	r16, 0x98	; 152
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	53 e4       	ldi	r21, 0x43	; 67
 26c:	69 81       	ldd	r22, Y+1	; 0x01
 26e:	7a 81       	ldd	r23, Y+2	; 0x02
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	9c 81       	ldd	r25, Y+4	; 0x04
 274:	1a d3       	rcall	.+1588   	; 0x8aa <__mulsf3>
 276:	dc 01       	movw	r26, r24
 278:	cb 01       	movw	r24, r22
 27a:	9c 01       	movw	r18, r24
 27c:	ad 01       	movw	r20, r26
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	74 e2       	ldi	r23, 0x24	; 36
 282:	84 ef       	ldi	r24, 0xF4	; 244
 284:	9a e4       	ldi	r25, 0x4A	; 74
 286:	ff d1       	rcall	.+1022   	; 0x686 <__divsf3>
 288:	dc 01       	movw	r26, r24
 28a:	cb 01       	movw	r24, r22
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	62 d2       	rcall	.+1220   	; 0x756 <__fixsfsi>
 292:	dc 01       	movw	r26, r24
 294:	cb 01       	movw	r24, r22
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f8 01       	movw	r30, r16
 29a:	91 83       	std	Z+1, r25	; 0x01
 29c:	80 83       	st	Z, r24
		TCNT3 = 0;
 29e:	84 e9       	ldi	r24, 0x94	; 148
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	11 82       	std	Z+1, r1	; 0x01
 2a6:	10 82       	st	Z, r1
		current_frequency = frequency;
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	9a 81       	ldd	r25, Y+2	; 0x02
 2ac:	ab 81       	ldd	r26, Y+3	; 0x03
 2ae:	bc 81       	ldd	r27, Y+4	; 0x04
 2b0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <current_frequency.1620>
 2b4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <current_frequency.1620+0x1>
 2b8:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <current_frequency.1620+0x2>
 2bc:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <current_frequency.1620+0x3>
	}
}
 2c0:	00 00       	nop
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <PWM_on>:

void PWM_on() {
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = (1 << COM3A0);
 2dc:	80 e9       	ldi	r24, 0x90	; 144
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	20 e4       	ldi	r18, 0x40	; 64
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 2e6:	81 e9       	ldi	r24, 0x91	; 145
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	2b e0       	ldi	r18, 0x0B	; 11
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
	set_PWM(0);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	cb 01       	movw	r24, r22
 2f6:	55 df       	rcall	.-342    	; 0x1a2 <set_PWM>
}
 2f8:	00 00       	nop
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <PWM_off>:

void PWM_off() {
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = 0x00;
 308:	80 e9       	ldi	r24, 0x90	; 144
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	fc 01       	movw	r30, r24
 30e:	10 82       	st	Z, r1
	TCCR3B = 0x00;
 310:	81 e9       	ldi	r24, 0x91	; 145
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	fc 01       	movw	r30, r24
 316:	10 82       	st	Z, r1
}
 318:	00 00       	nop
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <getFrq>:
// *****************************************************************************************
enum NOTES{C4,D4,E4,F4,G4,A4,B4,C5,S}N;
enum WAITS{EIGHT,QUARTER,HALF,WHOLE}W;

double getFrq(enum NOTES N)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 d0       	rcall	.+0      	; 0x326 <getFrq+0x6>
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	9a 83       	std	Y+2, r25	; 0x02
 32c:	89 83       	std	Y+1, r24	; 0x01
	switch(N)
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	cc 01       	movw	r24, r24
 334:	a0 e0       	ldi	r26, 0x00	; 0
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	27 e0       	ldi	r18, 0x07	; 7
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	84 1b       	sub	r24, r20
 342:	95 0b       	sbc	r25, r21
 344:	28 17       	cp	r18, r24
 346:	39 07       	cpc	r19, r25
 348:	60 f1       	brcs	.+88     	; 0x3a2 <getFrq+0x82>
 34a:	8a 5b       	subi	r24, 0xBA	; 186
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	fc 01       	movw	r30, r24
 350:	0f c3       	rjmp	.+1566   	; 0x970 <__tablejump2__>
	{
		case C4:
			return 261.63;
 352:	84 ea       	ldi	r24, 0xA4	; 164
 354:	90 ed       	ldi	r25, 0xD0	; 208
 356:	a2 e8       	ldi	r26, 0x82	; 130
 358:	b3 e4       	ldi	r27, 0x43	; 67
 35a:	26 c0       	rjmp	.+76     	; 0x3a8 <getFrq+0x88>
		case D4:
			return 296.66;
 35c:	8b e7       	ldi	r24, 0x7B	; 123
 35e:	94 e5       	ldi	r25, 0x54	; 84
 360:	a4 e9       	ldi	r26, 0x94	; 148
 362:	b3 e4       	ldi	r27, 0x43	; 67
 364:	21 c0       	rjmp	.+66     	; 0x3a8 <getFrq+0x88>
		case E4:
			return 329.63;
 366:	84 ea       	ldi	r24, 0xA4	; 164
 368:	90 ed       	ldi	r25, 0xD0	; 208
 36a:	a4 ea       	ldi	r26, 0xA4	; 164
 36c:	b3 e4       	ldi	r27, 0x43	; 67
 36e:	1c c0       	rjmp	.+56     	; 0x3a8 <getFrq+0x88>
		case F4:
			return 349.23;
 370:	81 e7       	ldi	r24, 0x71	; 113
 372:	9d e9       	ldi	r25, 0x9D	; 157
 374:	ae ea       	ldi	r26, 0xAE	; 174
 376:	b3 e4       	ldi	r27, 0x43	; 67
 378:	17 c0       	rjmp	.+46     	; 0x3a8 <getFrq+0x88>
		case G4:
			return 392.00;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	a4 ec       	ldi	r26, 0xC4	; 196
 380:	b3 e4       	ldi	r27, 0x43	; 67
 382:	12 c0       	rjmp	.+36     	; 0x3a8 <getFrq+0x88>
		case A4:
			return 440.00;
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac ed       	ldi	r26, 0xDC	; 220
 38a:	b3 e4       	ldi	r27, 0x43	; 67
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <getFrq+0x88>
		case B4:
			return 493.88;
 38e:	84 ea       	ldi	r24, 0xA4	; 164
 390:	90 ef       	ldi	r25, 0xF0	; 240
 392:	a6 ef       	ldi	r26, 0xF6	; 246
 394:	b3 e4       	ldi	r27, 0x43	; 67
 396:	08 c0       	rjmp	.+16     	; 0x3a8 <getFrq+0x88>
		case C5:
			return 523.25;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 ed       	ldi	r25, 0xD0	; 208
 39c:	a2 e0       	ldi	r26, 0x02	; 2
 39e:	b4 e4       	ldi	r27, 0x44	; 68
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <getFrq+0x88>
		
		default:
		case S:
			return 0;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	dc 01       	movw	r26, r24
	}
}
 3a8:	bc 01       	movw	r22, r24
 3aa:	cd 01       	movw	r24, r26
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <getWaits>:

unsigned short getWaits(enum WAITS W)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <getWaits+0x6>
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	9a 83       	std	Y+2, r25	; 0x02
 3c2:	89 83       	std	Y+1, r24	; 0x01
	switch(W)
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	9a 81       	ldd	r25, Y+2	; 0x02
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	91 05       	cpc	r25, r1
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <getWaits+0x30>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	91 05       	cpc	r25, r1
 3d2:	30 f0       	brcs	.+12     	; 0x3e0 <getWaits+0x2a>
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	91 05       	cpc	r25, r1
 3d8:	49 f0       	breq	.+18     	; 0x3ec <getWaits+0x36>
 3da:	03 97       	sbiw	r24, 0x03	; 3
 3dc:	51 f0       	breq	.+20     	; 0x3f2 <getWaits+0x3c>
 3de:	0c c0       	rjmp	.+24     	; 0x3f8 <getWaits+0x42>
	{
		case EIGHT:
			return 125;
 3e0:	8d e7       	ldi	r24, 0x7D	; 125
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0b c0       	rjmp	.+22     	; 0x3fc <getWaits+0x46>
		case QUARTER:
			return 250;
 3e6:	8a ef       	ldi	r24, 0xFA	; 250
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	08 c0       	rjmp	.+16     	; 0x3fc <getWaits+0x46>
		case HALF:
			return 500;
 3ec:	84 ef       	ldi	r24, 0xF4	; 244
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <getWaits+0x46>
		case WHOLE:
			return 1000;
 3f2:	88 ee       	ldi	r24, 0xE8	; 232
 3f4:	93 e0       	ldi	r25, 0x03	; 3
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <getWaits+0x46>
			
		default:
			return 0;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <SM_TICK>:
enum SM_STATE{WAIT_FOR_BUTTON, WAIT_FOR_BUTTON_FE, PLAYING_SONG}STATE;
enum SM_STATE_SONG{WAIT_FOR_START, START,PLAY_NOTE, NEXT_NOTE}SONG_STATE;
unsigned char songEnded = 0;

void SM_TICK()
{
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
	switch(STATE)
 40e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <STATE>
 412:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <STATE+0x1>
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	91 05       	cpc	r25, r1
 41a:	71 f1       	breq	.+92     	; 0x478 <SM_TICK+0x72>
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	91 05       	cpc	r25, r1
 420:	18 f0       	brcs	.+6      	; 0x428 <SM_TICK+0x22>
 422:	02 97       	sbiw	r24, 0x02	; 2
 424:	b9 f0       	breq	.+46     	; 0x454 <SM_TICK+0x4e>
				STATE = WAIT_FOR_BUTTON_FE;
			}
		
	}
	
}
 426:	3e c0       	rjmp	.+124    	; 0x4a4 <SM_TICK+0x9e>
void SM_TICK()
{
	switch(STATE)
	{
		case WAIT_FOR_BUTTON:
			if(playButton)
 428:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 42c:	88 23       	and	r24, r24
 42e:	69 f0       	breq	.+26     	; 0x44a <SM_TICK+0x44>
			{
				STATE = PLAYING_SONG;
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <STATE+0x1>
 438:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <STATE>
				SONG_STATE = START;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <SONG_STATE+0x1>
 444:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SONG_STATE>
			}
			else
			{
				STATE = WAIT_FOR_BUTTON;
			}
		break;
 448:	2d c0       	rjmp	.+90     	; 0x4a4 <SM_TICK+0x9e>
				STATE = PLAYING_SONG;
				SONG_STATE = START;
			}
			else
			{
				STATE = WAIT_FOR_BUTTON;
 44a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <STATE+0x1>
 44e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <STATE>
			}
		break;
 452:	28 c0       	rjmp	.+80     	; 0x4a4 <SM_TICK+0x9e>
		
		case PLAYING_SONG:
			if(!songEnded)
 454:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <songEnded>
 458:	88 23       	and	r24, r24
 45a:	39 f4       	brne	.+14     	; 0x46a <SM_TICK+0x64>
			{
				
				STATE = PLAYING_SONG;
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <STATE+0x1>
 464:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <STATE>
			}
			else
			{
				STATE = WAIT_FOR_BUTTON_FE;
			}
			break;
 468:	1d c0       	rjmp	.+58     	; 0x4a4 <SM_TICK+0x9e>
				
				STATE = PLAYING_SONG;
			}
			else
			{
				STATE = WAIT_FOR_BUTTON_FE;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <STATE+0x1>
 472:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <STATE>
			}
			break;
 476:	16 c0       	rjmp	.+44     	; 0x4a4 <SM_TICK+0x9e>
		case WAIT_FOR_BUTTON_FE:
			if(songEnded && !playButton)
 478:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <songEnded>
 47c:	88 23       	and	r24, r24
 47e:	59 f0       	breq	.+22     	; 0x496 <SM_TICK+0x90>
 480:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 484:	88 23       	and	r24, r24
 486:	39 f4       	brne	.+14     	; 0x496 <SM_TICK+0x90>
			{
				songEnded = 0;
 488:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <songEnded>
				STATE = WAIT_FOR_BUTTON;
 48c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <STATE+0x1>
 490:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <STATE>
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <SM_TICK+0x9e>
			}
			else
			{
				STATE = WAIT_FOR_BUTTON_FE;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <STATE+0x1>
 49e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <STATE>
			}
		
	}
	
}
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <SM_TICK+0x9e>
 4a4:	00 00       	nop
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <SM_SONG_TICK>:

void SM_SONG_TICK()
{
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
	switch(SONG_STATE)
 4b4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <SONG_STATE>
 4b8:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <SONG_STATE+0x1>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	91 05       	cpc	r25, r1
 4c0:	79 f0       	breq	.+30     	; 0x4e0 <SM_SONG_TICK+0x34>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	91 05       	cpc	r25, r1
 4c6:	38 f0       	brcs	.+14     	; 0x4d6 <SM_SONG_TICK+0x2a>
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	91 05       	cpc	r25, r1
 4cc:	f1 f0       	breq	.+60     	; 0x50a <SM_SONG_TICK+0x5e>
 4ce:	03 97       	sbiw	r24, 0x03	; 3
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <SM_SONG_TICK+0x28>
 4d2:	4e c0       	rjmp	.+156    	; 0x570 <SM_SONG_TICK+0xc4>
 4d4:	54 c0       	rjmp	.+168    	; 0x57e <SM_SONG_TICK+0xd2>
	{
		case WAIT_FOR_START:
			SONG_STATE = WAIT_FOR_START;
 4d6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <SONG_STATE+0x1>
 4da:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <SONG_STATE>
			break;
 4de:	4f c0       	rjmp	.+158    	; 0x57e <SM_SONG_TICK+0xd2>
		case START:
			SONG_STATE = PLAY_NOTE;
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <SONG_STATE+0x1>
 4e8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SONG_STATE>
			currentCount = 0;
 4ec:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <currentCount+0x1>
 4f0:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <currentCount>
			WaitFor = getWaits(timeing[0]);
 4f4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <timeing>
 4f8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <timeing+0x1>
 4fc:	5c df       	rcall	.-328    	; 0x3b6 <getWaits>
 4fe:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <WaitFor+0x1>
 502:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <WaitFor>
			PWM_on();
 506:	e6 de       	rcall	.-564    	; 0x2d4 <PWM_on>
			break;
 508:	3a c0       	rjmp	.+116    	; 0x57e <SM_SONG_TICK+0xd2>
		case PLAY_NOTE:
			if(ptr < maxSongLength && currentCount > WaitFor)
 50a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <ptr>
 50e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <maxSongLength>
 512:	98 17       	cp	r25, r24
 514:	90 f4       	brcc	.+36     	; 0x53a <SM_SONG_TICK+0x8e>
 516:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <currentCount>
 51a:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <currentCount+0x1>
 51e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <WaitFor>
 522:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <WaitFor+0x1>
 526:	82 17       	cp	r24, r18
 528:	93 07       	cpc	r25, r19
 52a:	38 f4       	brcc	.+14     	; 0x53a <SM_SONG_TICK+0x8e>
			{
				STATE = NEXT_NOTE;
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <STATE+0x1>
 534:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <STATE>
			}
			else
			{
				currentCount++;
			}
		break;
 538:	22 c0       	rjmp	.+68     	; 0x57e <SM_SONG_TICK+0xd2>
		case PLAY_NOTE:
			if(ptr < maxSongLength && currentCount > WaitFor)
			{
				STATE = NEXT_NOTE;
			}
			else if(ptr >= maxSongLength)
 53a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <ptr>
 53e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <maxSongLength>
 542:	98 17       	cp	r25, r24
 544:	58 f0       	brcs	.+22     	; 0x55c <SM_SONG_TICK+0xb0>
			{
				songEnded = 1;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <songEnded>
				ptr = 0;
				PWM_off();
 54c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <ptr>
				SONG_STATE = WAIT_FOR_START;
 550:	d7 de       	rcall	.-594    	; 0x300 <PWM_off>
 552:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <SONG_STATE+0x1>
 556:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <SONG_STATE>
			}
			else
			{
				currentCount++;
 55a:	11 c0       	rjmp	.+34     	; 0x57e <SM_SONG_TICK+0xd2>
 55c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentCount>
 560:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentCount+0x1>
 564:	01 96       	adiw	r24, 0x01	; 1
 566:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <currentCount+0x1>
 56a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <currentCount>
			}
		break;
		
		case NEXT_NOTE:
			SONG_STATE = PLAY_NOTE;
 56e:	07 c0       	rjmp	.+14     	; 0x57e <SM_SONG_TICK+0xd2>
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <SONG_STATE+0x1>
 578:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SONG_STATE>
		break;
	}
	
	switch(SONG_STATE)
 57c:	00 00       	nop
 57e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <SONG_STATE>
 582:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <SONG_STATE+0x1>
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	91 05       	cpc	r25, r1
 58a:	19 f0       	breq	.+6      	; 0x592 <SM_SONG_TICK+0xe6>
 58c:	03 97       	sbiw	r24, 0x03	; 3
			currentCount = 0;
			ptr++;
			WaitFor = getWaits(timeing[ptr]);
		break;
	}
}
 58e:	e1 f0       	breq	.+56     	; 0x5c8 <SM_SONG_TICK+0x11c>
	}
	
	switch(SONG_STATE)
	{
		case PLAY_NOTE:
			set_PWM(getFrq(song[ptr]));
 590:	35 c0       	rjmp	.+106    	; 0x5fc <SM_SONG_TICK+0x150>
 592:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ptr>
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	8c 5f       	subi	r24, 0xFC	; 252
 5a0:	9e 4f       	sbci	r25, 0xFE	; 254
 5a2:	fc 01       	movw	r30, r24
 5a4:	80 81       	ld	r24, Z
 5a6:	91 81       	ldd	r25, Z+1	; 0x01
 5a8:	bb de       	rcall	.-650    	; 0x320 <getFrq>
 5aa:	dc 01       	movw	r26, r24
 5ac:	cb 01       	movw	r24, r22
 5ae:	bc 01       	movw	r22, r24
 5b0:	cd 01       	movw	r24, r26
			currentCount++;
 5b2:	f7 dd       	rcall	.-1042   	; 0x1a2 <set_PWM>
 5b4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <currentCount>
 5b8:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <currentCount+0x1>
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <currentCount+0x1>
 5c2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <currentCount>
		break;
			
		case NEXT_NOTE:
			currentCount = 0;
 5c6:	1a c0       	rjmp	.+52     	; 0x5fc <SM_SONG_TICK+0x150>
 5c8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <currentCount+0x1>
 5cc:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <currentCount>
			ptr++;
 5d0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ptr>
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ptr>
			WaitFor = getWaits(timeing[ptr]);
 5da:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ptr>
 5de:	88 2f       	mov	r24, r24
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	8e 5d       	subi	r24, 0xDE	; 222
 5e8:	9e 4f       	sbci	r25, 0xFE	; 254
 5ea:	fc 01       	movw	r30, r24
 5ec:	80 81       	ld	r24, Z
 5ee:	91 81       	ldd	r25, Z+1	; 0x01
 5f0:	e2 de       	rcall	.-572    	; 0x3b6 <getWaits>
 5f2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <WaitFor+0x1>
 5f6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <WaitFor>
		break;
	}
}
 5fa:	00 00       	nop
 5fc:	00 00       	nop
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <main>:

int main(void)
{
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	cd b7       	in	r28, 0x3d	; 61
 60a:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 60c:	81 e2       	ldi	r24, 0x21	; 33
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	fc 01       	movw	r30, r24
 612:	10 82       	st	Z, r1
 614:	82 e2       	ldi	r24, 0x22	; 34
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	2f ef       	ldi	r18, 0xFF	; 255
 61a:	fc 01       	movw	r30, r24
 61c:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 61e:	84 e2       	ldi	r24, 0x24	; 36
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	2f ef       	ldi	r18, 0xFF	; 255
 624:	fc 01       	movw	r30, r24
 626:	20 83       	st	Z, r18
 628:	85 e2       	ldi	r24, 0x25	; 37
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	fc 01       	movw	r30, r24
 62e:	10 82       	st	Z, r1
	
	STATE = WAIT_FOR_BUTTON;
 630:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <STATE+0x1>
 634:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <STATE>
	SONG_STATE = WAIT_FOR_START;
 638:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <SONG_STATE+0x1>
 63c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <SONG_STATE>
	
	TimerSet(1);
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 648:	7e dd       	rcall	.-1284   	; 0x146 <TimerSet>
 64a:	46 dd       	rcall	.-1396   	; 0xd8 <TimerOn>
	
    /* Replace with your application code */
    while (1) 
    {
		playButton = ((PINA & 0x01) == 0x01);
 64c:	80 e2       	ldi	r24, 0x20	; 32
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	fc 01       	movw	r30, r24
 652:	80 81       	ld	r24, Z
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	81 70       	andi	r24, 0x01	; 1
 65a:	99 27       	eor	r25, r25
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	89 2b       	or	r24, r25
 660:	09 f4       	brne	.+2      	; 0x664 <main+0x60>
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	82 2f       	mov	r24, r18
		SM_TICK();
 666:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
		SM_SONG_TICK();
 66a:	cd de       	rcall	.-614    	; 0x406 <SM_TICK>
 66c:	1f df       	rcall	.-450    	; 0x4ac <SM_SONG_TICK>
		while(!TimerFlag);
 66e:	00 00       	nop
 670:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <TimerFlag>
 674:	88 23       	and	r24, r24
 676:	e1 f3       	breq	.-8      	; 0x670 <main+0x6c>
		TimerFlag=0;
 678:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <TimerFlag>
    }
 67c:	e7 cf       	rjmp	.-50     	; 0x64c <main+0x48>

0000067e <__cmpsf2>:
 67e:	9c d0       	rcall	.+312    	; 0x7b8 <__fp_cmp>
 680:	08 f4       	brcc	.+2      	; 0x684 <__cmpsf2+0x6>
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 95       	ret

00000686 <__divsf3>:
 686:	0c d0       	rcall	.+24     	; 0x6a0 <__divsf3x>
 688:	d2 c0       	rjmp	.+420    	; 0x82e <__fp_round>
 68a:	ca d0       	rcall	.+404    	; 0x820 <__fp_pscB>
 68c:	40 f0       	brcs	.+16     	; 0x69e <__divsf3+0x18>
 68e:	c1 d0       	rcall	.+386    	; 0x812 <__fp_pscA>
 690:	30 f0       	brcs	.+12     	; 0x69e <__divsf3+0x18>
 692:	21 f4       	brne	.+8      	; 0x69c <__divsf3+0x16>
 694:	5f 3f       	cpi	r21, 0xFF	; 255
 696:	19 f0       	breq	.+6      	; 0x69e <__divsf3+0x18>
 698:	b3 c0       	rjmp	.+358    	; 0x800 <__fp_inf>
 69a:	51 11       	cpse	r21, r1
 69c:	fc c0       	rjmp	.+504    	; 0x896 <__fp_szero>
 69e:	b6 c0       	rjmp	.+364    	; 0x80c <__fp_nan>

000006a0 <__divsf3x>:
 6a0:	d7 d0       	rcall	.+430    	; 0x850 <__fp_split3>
 6a2:	98 f3       	brcs	.-26     	; 0x68a <__divsf3+0x4>

000006a4 <__divsf3_pse>:
 6a4:	99 23       	and	r25, r25
 6a6:	c9 f3       	breq	.-14     	; 0x69a <__divsf3+0x14>
 6a8:	55 23       	and	r21, r21
 6aa:	b1 f3       	breq	.-20     	; 0x698 <__divsf3+0x12>
 6ac:	95 1b       	sub	r25, r21
 6ae:	55 0b       	sbc	r21, r21
 6b0:	bb 27       	eor	r27, r27
 6b2:	aa 27       	eor	r26, r26
 6b4:	62 17       	cp	r22, r18
 6b6:	73 07       	cpc	r23, r19
 6b8:	84 07       	cpc	r24, r20
 6ba:	38 f0       	brcs	.+14     	; 0x6ca <__divsf3_pse+0x26>
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	5f 4f       	sbci	r21, 0xFF	; 255
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	44 1f       	adc	r20, r20
 6c6:	aa 1f       	adc	r26, r26
 6c8:	a9 f3       	breq	.-22     	; 0x6b4 <__divsf3_pse+0x10>
 6ca:	33 d0       	rcall	.+102    	; 0x732 <__divsf3_pse+0x8e>
 6cc:	0e 2e       	mov	r0, r30
 6ce:	3a f0       	brmi	.+14     	; 0x6de <__divsf3_pse+0x3a>
 6d0:	e0 e8       	ldi	r30, 0x80	; 128
 6d2:	30 d0       	rcall	.+96     	; 0x734 <__divsf3_pse+0x90>
 6d4:	91 50       	subi	r25, 0x01	; 1
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	e6 95       	lsr	r30
 6da:	00 1c       	adc	r0, r0
 6dc:	ca f7       	brpl	.-14     	; 0x6d0 <__divsf3_pse+0x2c>
 6de:	29 d0       	rcall	.+82     	; 0x732 <__divsf3_pse+0x8e>
 6e0:	fe 2f       	mov	r31, r30
 6e2:	27 d0       	rcall	.+78     	; 0x732 <__divsf3_pse+0x8e>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	bb 1f       	adc	r27, r27
 6ec:	26 17       	cp	r18, r22
 6ee:	37 07       	cpc	r19, r23
 6f0:	48 07       	cpc	r20, r24
 6f2:	ab 07       	cpc	r26, r27
 6f4:	b0 e8       	ldi	r27, 0x80	; 128
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__divsf3_pse+0x56>
 6f8:	bb 0b       	sbc	r27, r27
 6fa:	80 2d       	mov	r24, r0
 6fc:	bf 01       	movw	r22, r30
 6fe:	ff 27       	eor	r31, r31
 700:	93 58       	subi	r25, 0x83	; 131
 702:	5f 4f       	sbci	r21, 0xFF	; 255
 704:	2a f0       	brmi	.+10     	; 0x710 <__divsf3_pse+0x6c>
 706:	9e 3f       	cpi	r25, 0xFE	; 254
 708:	51 05       	cpc	r21, r1
 70a:	68 f0       	brcs	.+26     	; 0x726 <__divsf3_pse+0x82>
 70c:	79 c0       	rjmp	.+242    	; 0x800 <__fp_inf>
 70e:	c3 c0       	rjmp	.+390    	; 0x896 <__fp_szero>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	ec f3       	brlt	.-6      	; 0x70e <__divsf3_pse+0x6a>
 714:	98 3e       	cpi	r25, 0xE8	; 232
 716:	dc f3       	brlt	.-10     	; 0x70e <__divsf3_pse+0x6a>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f7 95       	ror	r31
 722:	9f 5f       	subi	r25, 0xFF	; 255
 724:	c9 f7       	brne	.-14     	; 0x718 <__divsf3_pse+0x74>
 726:	88 0f       	add	r24, r24
 728:	91 1d       	adc	r25, r1
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret
 732:	e1 e0       	ldi	r30, 0x01	; 1
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	bb 1f       	adc	r27, r27
 73c:	62 17       	cp	r22, r18
 73e:	73 07       	cpc	r23, r19
 740:	84 07       	cpc	r24, r20
 742:	ba 07       	cpc	r27, r26
 744:	20 f0       	brcs	.+8      	; 0x74e <__divsf3_pse+0xaa>
 746:	62 1b       	sub	r22, r18
 748:	73 0b       	sbc	r23, r19
 74a:	84 0b       	sbc	r24, r20
 74c:	ba 0b       	sbc	r27, r26
 74e:	ee 1f       	adc	r30, r30
 750:	88 f7       	brcc	.-30     	; 0x734 <__divsf3_pse+0x90>
 752:	e0 95       	com	r30
 754:	08 95       	ret

00000756 <__fixsfsi>:
 756:	04 d0       	rcall	.+8      	; 0x760 <__fixunssfsi>
 758:	68 94       	set
 75a:	b1 11       	cpse	r27, r1
 75c:	9c c0       	rjmp	.+312    	; 0x896 <__fp_szero>
 75e:	08 95       	ret

00000760 <__fixunssfsi>:
 760:	7f d0       	rcall	.+254    	; 0x860 <__fp_splitA>
 762:	88 f0       	brcs	.+34     	; 0x786 <__fixunssfsi+0x26>
 764:	9f 57       	subi	r25, 0x7F	; 127
 766:	90 f0       	brcs	.+36     	; 0x78c <__fixunssfsi+0x2c>
 768:	b9 2f       	mov	r27, r25
 76a:	99 27       	eor	r25, r25
 76c:	b7 51       	subi	r27, 0x17	; 23
 76e:	a0 f0       	brcs	.+40     	; 0x798 <__fixunssfsi+0x38>
 770:	d1 f0       	breq	.+52     	; 0x7a6 <__fixunssfsi+0x46>
 772:	66 0f       	add	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	1a f0       	brmi	.+6      	; 0x782 <__fixunssfsi+0x22>
 77c:	ba 95       	dec	r27
 77e:	c9 f7       	brne	.-14     	; 0x772 <__fixunssfsi+0x12>
 780:	12 c0       	rjmp	.+36     	; 0x7a6 <__fixunssfsi+0x46>
 782:	b1 30       	cpi	r27, 0x01	; 1
 784:	81 f0       	breq	.+32     	; 0x7a6 <__fixunssfsi+0x46>
 786:	86 d0       	rcall	.+268    	; 0x894 <__fp_zero>
 788:	b1 e0       	ldi	r27, 0x01	; 1
 78a:	08 95       	ret
 78c:	83 c0       	rjmp	.+262    	; 0x894 <__fp_zero>
 78e:	67 2f       	mov	r22, r23
 790:	78 2f       	mov	r23, r24
 792:	88 27       	eor	r24, r24
 794:	b8 5f       	subi	r27, 0xF8	; 248
 796:	39 f0       	breq	.+14     	; 0x7a6 <__fixunssfsi+0x46>
 798:	b9 3f       	cpi	r27, 0xF9	; 249
 79a:	cc f3       	brlt	.-14     	; 0x78e <__fixunssfsi+0x2e>
 79c:	86 95       	lsr	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b3 95       	inc	r27
 7a4:	d9 f7       	brne	.-10     	; 0x79c <__fixunssfsi+0x3c>
 7a6:	3e f4       	brtc	.+14     	; 0x7b6 <__fixunssfsi+0x56>
 7a8:	90 95       	com	r25
 7aa:	80 95       	com	r24
 7ac:	70 95       	com	r23
 7ae:	61 95       	neg	r22
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	08 95       	ret

000007b8 <__fp_cmp>:
 7b8:	99 0f       	add	r25, r25
 7ba:	00 08       	sbc	r0, r0
 7bc:	55 0f       	add	r21, r21
 7be:	aa 0b       	sbc	r26, r26
 7c0:	e0 e8       	ldi	r30, 0x80	; 128
 7c2:	fe ef       	ldi	r31, 0xFE	; 254
 7c4:	16 16       	cp	r1, r22
 7c6:	17 06       	cpc	r1, r23
 7c8:	e8 07       	cpc	r30, r24
 7ca:	f9 07       	cpc	r31, r25
 7cc:	c0 f0       	brcs	.+48     	; 0x7fe <__fp_cmp+0x46>
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	e4 07       	cpc	r30, r20
 7d4:	f5 07       	cpc	r31, r21
 7d6:	98 f0       	brcs	.+38     	; 0x7fe <__fp_cmp+0x46>
 7d8:	62 1b       	sub	r22, r18
 7da:	73 0b       	sbc	r23, r19
 7dc:	84 0b       	sbc	r24, r20
 7de:	95 0b       	sbc	r25, r21
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <__fp_cmp+0x38>
 7e2:	0a 26       	eor	r0, r26
 7e4:	61 f0       	breq	.+24     	; 0x7fe <__fp_cmp+0x46>
 7e6:	23 2b       	or	r18, r19
 7e8:	24 2b       	or	r18, r20
 7ea:	25 2b       	or	r18, r21
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <__fp_cmp+0x3e>
 7ee:	08 95       	ret
 7f0:	0a 26       	eor	r0, r26
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <__fp_cmp+0x3e>
 7f4:	a1 40       	sbci	r26, 0x01	; 1
 7f6:	a6 95       	lsr	r26
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	81 1d       	adc	r24, r1
 7fc:	81 1d       	adc	r24, r1
 7fe:	08 95       	ret

00000800 <__fp_inf>:
 800:	97 f9       	bld	r25, 7
 802:	9f 67       	ori	r25, 0x7F	; 127
 804:	80 e8       	ldi	r24, 0x80	; 128
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	08 95       	ret

0000080c <__fp_nan>:
 80c:	9f ef       	ldi	r25, 0xFF	; 255
 80e:	80 ec       	ldi	r24, 0xC0	; 192
 810:	08 95       	ret

00000812 <__fp_pscA>:
 812:	00 24       	eor	r0, r0
 814:	0a 94       	dec	r0
 816:	16 16       	cp	r1, r22
 818:	17 06       	cpc	r1, r23
 81a:	18 06       	cpc	r1, r24
 81c:	09 06       	cpc	r0, r25
 81e:	08 95       	ret

00000820 <__fp_pscB>:
 820:	00 24       	eor	r0, r0
 822:	0a 94       	dec	r0
 824:	12 16       	cp	r1, r18
 826:	13 06       	cpc	r1, r19
 828:	14 06       	cpc	r1, r20
 82a:	05 06       	cpc	r0, r21
 82c:	08 95       	ret

0000082e <__fp_round>:
 82e:	09 2e       	mov	r0, r25
 830:	03 94       	inc	r0
 832:	00 0c       	add	r0, r0
 834:	11 f4       	brne	.+4      	; 0x83a <__fp_round+0xc>
 836:	88 23       	and	r24, r24
 838:	52 f0       	brmi	.+20     	; 0x84e <__fp_round+0x20>
 83a:	bb 0f       	add	r27, r27
 83c:	40 f4       	brcc	.+16     	; 0x84e <__fp_round+0x20>
 83e:	bf 2b       	or	r27, r31
 840:	11 f4       	brne	.+4      	; 0x846 <__fp_round+0x18>
 842:	60 ff       	sbrs	r22, 0
 844:	04 c0       	rjmp	.+8      	; 0x84e <__fp_round+0x20>
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

00000850 <__fp_split3>:
 850:	57 fd       	sbrc	r21, 7
 852:	90 58       	subi	r25, 0x80	; 128
 854:	44 0f       	add	r20, r20
 856:	55 1f       	adc	r21, r21
 858:	59 f0       	breq	.+22     	; 0x870 <__fp_splitA+0x10>
 85a:	5f 3f       	cpi	r21, 0xFF	; 255
 85c:	71 f0       	breq	.+28     	; 0x87a <__fp_splitA+0x1a>
 85e:	47 95       	ror	r20

00000860 <__fp_splitA>:
 860:	88 0f       	add	r24, r24
 862:	97 fb       	bst	r25, 7
 864:	99 1f       	adc	r25, r25
 866:	61 f0       	breq	.+24     	; 0x880 <__fp_splitA+0x20>
 868:	9f 3f       	cpi	r25, 0xFF	; 255
 86a:	79 f0       	breq	.+30     	; 0x88a <__fp_splitA+0x2a>
 86c:	87 95       	ror	r24
 86e:	08 95       	ret
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	14 06       	cpc	r1, r20
 876:	55 1f       	adc	r21, r21
 878:	f2 cf       	rjmp	.-28     	; 0x85e <__fp_split3+0xe>
 87a:	46 95       	lsr	r20
 87c:	f1 df       	rcall	.-30     	; 0x860 <__fp_splitA>
 87e:	08 c0       	rjmp	.+16     	; 0x890 <__fp_splitA+0x30>
 880:	16 16       	cp	r1, r22
 882:	17 06       	cpc	r1, r23
 884:	18 06       	cpc	r1, r24
 886:	99 1f       	adc	r25, r25
 888:	f1 cf       	rjmp	.-30     	; 0x86c <__fp_splitA+0xc>
 88a:	86 95       	lsr	r24
 88c:	71 05       	cpc	r23, r1
 88e:	61 05       	cpc	r22, r1
 890:	08 94       	sec
 892:	08 95       	ret

00000894 <__fp_zero>:
 894:	e8 94       	clt

00000896 <__fp_szero>:
 896:	bb 27       	eor	r27, r27
 898:	66 27       	eor	r22, r22
 89a:	77 27       	eor	r23, r23
 89c:	cb 01       	movw	r24, r22
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <__gesf2>:
 8a2:	8a df       	rcall	.-236    	; 0x7b8 <__fp_cmp>
 8a4:	08 f4       	brcc	.+2      	; 0x8a8 <__gesf2+0x6>
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	08 95       	ret

000008aa <__mulsf3>:
 8aa:	0b d0       	rcall	.+22     	; 0x8c2 <__mulsf3x>
 8ac:	c0 cf       	rjmp	.-128    	; 0x82e <__fp_round>
 8ae:	b1 df       	rcall	.-158    	; 0x812 <__fp_pscA>
 8b0:	28 f0       	brcs	.+10     	; 0x8bc <__mulsf3+0x12>
 8b2:	b6 df       	rcall	.-148    	; 0x820 <__fp_pscB>
 8b4:	18 f0       	brcs	.+6      	; 0x8bc <__mulsf3+0x12>
 8b6:	95 23       	and	r25, r21
 8b8:	09 f0       	breq	.+2      	; 0x8bc <__mulsf3+0x12>
 8ba:	a2 cf       	rjmp	.-188    	; 0x800 <__fp_inf>
 8bc:	a7 cf       	rjmp	.-178    	; 0x80c <__fp_nan>
 8be:	11 24       	eor	r1, r1
 8c0:	ea cf       	rjmp	.-44     	; 0x896 <__fp_szero>

000008c2 <__mulsf3x>:
 8c2:	c6 df       	rcall	.-116    	; 0x850 <__fp_split3>
 8c4:	a0 f3       	brcs	.-24     	; 0x8ae <__mulsf3+0x4>

000008c6 <__mulsf3_pse>:
 8c6:	95 9f       	mul	r25, r21
 8c8:	d1 f3       	breq	.-12     	; 0x8be <__mulsf3+0x14>
 8ca:	95 0f       	add	r25, r21
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	55 1f       	adc	r21, r21
 8d0:	62 9f       	mul	r22, r18
 8d2:	f0 01       	movw	r30, r0
 8d4:	72 9f       	mul	r23, r18
 8d6:	bb 27       	eor	r27, r27
 8d8:	f0 0d       	add	r31, r0
 8da:	b1 1d       	adc	r27, r1
 8dc:	63 9f       	mul	r22, r19
 8de:	aa 27       	eor	r26, r26
 8e0:	f0 0d       	add	r31, r0
 8e2:	b1 1d       	adc	r27, r1
 8e4:	aa 1f       	adc	r26, r26
 8e6:	64 9f       	mul	r22, r20
 8e8:	66 27       	eor	r22, r22
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	66 1f       	adc	r22, r22
 8f0:	82 9f       	mul	r24, r18
 8f2:	22 27       	eor	r18, r18
 8f4:	b0 0d       	add	r27, r0
 8f6:	a1 1d       	adc	r26, r1
 8f8:	62 1f       	adc	r22, r18
 8fa:	73 9f       	mul	r23, r19
 8fc:	b0 0d       	add	r27, r0
 8fe:	a1 1d       	adc	r26, r1
 900:	62 1f       	adc	r22, r18
 902:	83 9f       	mul	r24, r19
 904:	a0 0d       	add	r26, r0
 906:	61 1d       	adc	r22, r1
 908:	22 1f       	adc	r18, r18
 90a:	74 9f       	mul	r23, r20
 90c:	33 27       	eor	r19, r19
 90e:	a0 0d       	add	r26, r0
 910:	61 1d       	adc	r22, r1
 912:	23 1f       	adc	r18, r19
 914:	84 9f       	mul	r24, r20
 916:	60 0d       	add	r22, r0
 918:	21 1d       	adc	r18, r1
 91a:	82 2f       	mov	r24, r18
 91c:	76 2f       	mov	r23, r22
 91e:	6a 2f       	mov	r22, r26
 920:	11 24       	eor	r1, r1
 922:	9f 57       	subi	r25, 0x7F	; 127
 924:	50 40       	sbci	r21, 0x00	; 0
 926:	8a f0       	brmi	.+34     	; 0x94a <__mulsf3_pse+0x84>
 928:	e1 f0       	breq	.+56     	; 0x962 <__mulsf3_pse+0x9c>
 92a:	88 23       	and	r24, r24
 92c:	4a f0       	brmi	.+18     	; 0x940 <__mulsf3_pse+0x7a>
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	bb 1f       	adc	r27, r27
 934:	66 1f       	adc	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	50 40       	sbci	r21, 0x00	; 0
 93e:	a9 f7       	brne	.-22     	; 0x92a <__mulsf3_pse+0x64>
 940:	9e 3f       	cpi	r25, 0xFE	; 254
 942:	51 05       	cpc	r21, r1
 944:	70 f0       	brcs	.+28     	; 0x962 <__mulsf3_pse+0x9c>
 946:	5c cf       	rjmp	.-328    	; 0x800 <__fp_inf>
 948:	a6 cf       	rjmp	.-180    	; 0x896 <__fp_szero>
 94a:	5f 3f       	cpi	r21, 0xFF	; 255
 94c:	ec f3       	brlt	.-6      	; 0x948 <__mulsf3_pse+0x82>
 94e:	98 3e       	cpi	r25, 0xE8	; 232
 950:	dc f3       	brlt	.-10     	; 0x948 <__mulsf3_pse+0x82>
 952:	86 95       	lsr	r24
 954:	77 95       	ror	r23
 956:	67 95       	ror	r22
 958:	b7 95       	ror	r27
 95a:	f7 95       	ror	r31
 95c:	e7 95       	ror	r30
 95e:	9f 5f       	subi	r25, 0xFF	; 255
 960:	c1 f7       	brne	.-16     	; 0x952 <__mulsf3_pse+0x8c>
 962:	fe 2b       	or	r31, r30
 964:	88 0f       	add	r24, r24
 966:	91 1d       	adc	r25, r1
 968:	96 95       	lsr	r25
 96a:	87 95       	ror	r24
 96c:	97 f9       	bld	r25, 7
 96e:	08 95       	ret

00000970 <__tablejump2__>:
 970:	ee 0f       	add	r30, r30
 972:	ff 1f       	adc	r31, r31
 974:	00 24       	eor	r0, r0
 976:	00 1c       	adc	r0, r0
 978:	0b be       	out	0x3b, r0	; 59
 97a:	07 90       	elpm	r0, Z+
 97c:	f6 91       	elpm	r31, Z
 97e:	e0 2d       	mov	r30, r0
 980:	09 94       	ijmp

00000982 <_exit>:
 982:	f8 94       	cli

00000984 <__stop_program>:
 984:	ff cf       	rjmp	.-2      	; 0x984 <__stop_program>
